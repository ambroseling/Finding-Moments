program(1.0)
[buildInfo = dict<tensor<string, []>, tensor<string, []>>({{"coremlc-component-MIL", "5.33.5"}, {"coremlc-version", "1877.40.3"}, {"coremltools-component-torch", "1.13.1+cu117"}, {"coremltools-source-dialect", "TorchScript"}, {"coremltools-version", "8.0"}})]
{
    func main<ios17>(tensor<fp32, [1, 3, 256, 256]> input_image) {
            tensor<fp32, []> input_image__scaled___y_0 = const()[name = tensor<string, []>("input_image__scaled___y_0"), val = tensor<fp32, []>(0x1.010102p-8)];
            tensor<fp32, [1, 3, 256, 256]> input_image__scaled__ = mul(x = input_image, y = input_image__scaled___y_0)[name = tensor<string, []>("input_image__scaled__")];
            tensor<bool, []> var_4 = const()[name = tensor<string, []>("op_4"), val = tensor<bool, []>(true)];
            tensor<bool, []> var_6 = const()[name = tensor<string, []>("op_6"), val = tensor<bool, []>(false)];
            tensor<int32, []> var_22 = const()[name = tensor<string, []>("op_22"), val = tensor<int32, []>(-1)];
            tensor<string, []> input_1_pad_type_0 = const()[name = tensor<string, []>("input_1_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_1_pad_0 = const()[name = tensor<string, []>("input_1_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, [2]> input_1_strides_0 = const()[name = tensor<string, []>("input_1_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [2]> input_1_dilations_0 = const()[name = tensor<string, []>("input_1_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_1_groups_0 = const()[name = tensor<string, []>("input_1_groups_0"), val = tensor<int32, []>(1)];
            tensor<string, []> input_image_to_fp16_dtype_0 = const()[name = tensor<string, []>("input_image_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [64, 3, 3, 3]> image_encoder_model_patch_embed_0_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_patch_embed_0_reparam_conv_weight_to_fp16"), val = tensor<fp16, [64, 3, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(64)))];
            tensor<fp16, [64]> image_encoder_model_patch_embed_0_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_patch_embed_0_reparam_conv_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3584)))];
            tensor<fp16, [1, 3, 256, 256]> input_image_to_fp16 = cast(dtype = input_image_to_fp16_dtype_0, x = input_image__scaled__)[name = tensor<string, []>("cast_12")];
            tensor<fp16, [1, 64, 128, 128]> input_1_cast_fp16 = conv(bias = image_encoder_model_patch_embed_0_reparam_conv_bias_to_fp16, dilations = input_1_dilations_0, groups = input_1_groups_0, pad = input_1_pad_0, pad_type = input_1_pad_type_0, strides = input_1_strides_0, weight = image_encoder_model_patch_embed_0_reparam_conv_weight_to_fp16, x = input_image_to_fp16)[name = tensor<string, []>("input_1_cast_fp16")];
            tensor<string, []> input_3_mode_0 = const()[name = tensor<string, []>("input_3_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 64, 128, 128]> input_3_cast_fp16 = gelu(mode = input_3_mode_0, x = input_1_cast_fp16)[name = tensor<string, []>("input_3_cast_fp16")];
            tensor<string, []> input_5_pad_type_0 = const()[name = tensor<string, []>("input_5_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_5_pad_0 = const()[name = tensor<string, []>("input_5_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, [2]> input_5_strides_0 = const()[name = tensor<string, []>("input_5_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, []> input_5_groups_0 = const()[name = tensor<string, []>("input_5_groups_0"), val = tensor<int32, []>(64)];
            tensor<int32, [2]> input_5_dilations_0 = const()[name = tensor<string, []>("input_5_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [64, 1, 3, 3]> image_encoder_model_patch_embed_1_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_patch_embed_1_reparam_conv_weight_to_fp16"), val = tensor<fp16, [64, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3776)))];
            tensor<fp16, [64]> image_encoder_model_patch_embed_1_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_patch_embed_1_reparam_conv_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4992)))];
            tensor<fp16, [1, 64, 64, 64]> input_5_cast_fp16 = conv(bias = image_encoder_model_patch_embed_1_reparam_conv_bias_to_fp16, dilations = input_5_dilations_0, groups = input_5_groups_0, pad = input_5_pad_0, pad_type = input_5_pad_type_0, strides = input_5_strides_0, weight = image_encoder_model_patch_embed_1_reparam_conv_weight_to_fp16, x = input_3_cast_fp16)[name = tensor<string, []>("input_5_cast_fp16")];
            tensor<string, []> input_7_mode_0 = const()[name = tensor<string, []>("input_7_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 64, 64, 64]> input_7_cast_fp16 = gelu(mode = input_7_mode_0, x = input_5_cast_fp16)[name = tensor<string, []>("input_7_cast_fp16")];
            tensor<string, []> input_9_pad_type_0 = const()[name = tensor<string, []>("input_9_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_9_strides_0 = const()[name = tensor<string, []>("input_9_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_9_pad_0 = const()[name = tensor<string, []>("input_9_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_9_dilations_0 = const()[name = tensor<string, []>("input_9_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_9_groups_0 = const()[name = tensor<string, []>("input_9_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [64, 64, 1, 1]> image_encoder_model_patch_embed_2_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_patch_embed_2_reparam_conv_weight_to_fp16"), val = tensor<fp16, [64, 64, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5184)))];
            tensor<fp16, [64]> image_encoder_model_patch_embed_2_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_patch_embed_2_reparam_conv_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(13440)))];
            tensor<fp16, [1, 64, 64, 64]> input_9_cast_fp16 = conv(bias = image_encoder_model_patch_embed_2_reparam_conv_bias_to_fp16, dilations = input_9_dilations_0, groups = input_9_groups_0, pad = input_9_pad_0, pad_type = input_9_pad_type_0, strides = input_9_strides_0, weight = image_encoder_model_patch_embed_2_reparam_conv_weight_to_fp16, x = input_7_cast_fp16)[name = tensor<string, []>("input_9_cast_fp16")];
            tensor<string, []> input_11_mode_0 = const()[name = tensor<string, []>("input_11_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 64, 64, 64]> input_11_cast_fp16 = gelu(mode = input_11_mode_0, x = input_9_cast_fp16)[name = tensor<string, []>("input_11_cast_fp16")];
            tensor<string, []> input_13_pad_type_0 = const()[name = tensor<string, []>("input_13_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_13_pad_0 = const()[name = tensor<string, []>("input_13_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, []> input_13_groups_0 = const()[name = tensor<string, []>("input_13_groups_0"), val = tensor<int32, []>(64)];
            tensor<int32, [2]> input_13_strides_0 = const()[name = tensor<string, []>("input_13_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_13_dilations_0 = const()[name = tensor<string, []>("input_13_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [64, 1, 3, 3]> image_encoder_model_network_0_0_token_mixer_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_0_0_token_mixer_reparam_conv_weight_to_fp16"), val = tensor<fp16, [64, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(13632)))];
            tensor<fp16, [64]> image_encoder_model_network_0_0_token_mixer_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_0_0_token_mixer_reparam_conv_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(14848)))];
            tensor<fp16, [1, 64, 64, 64]> input_13_cast_fp16 = conv(bias = image_encoder_model_network_0_0_token_mixer_reparam_conv_bias_to_fp16, dilations = input_13_dilations_0, groups = input_13_groups_0, pad = input_13_pad_0, pad_type = input_13_pad_type_0, strides = input_13_strides_0, weight = image_encoder_model_network_0_0_token_mixer_reparam_conv_weight_to_fp16, x = input_11_cast_fp16)[name = tensor<string, []>("input_13_cast_fp16")];
            tensor<string, []> input_15_pad_type_0 = const()[name = tensor<string, []>("input_15_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_15_pad_0 = const()[name = tensor<string, []>("input_15_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_15_groups_0 = const()[name = tensor<string, []>("input_15_groups_0"), val = tensor<int32, []>(64)];
            tensor<int32, [2]> input_15_strides_0 = const()[name = tensor<string, []>("input_15_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_15_dilations_0 = const()[name = tensor<string, []>("input_15_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [64, 1, 7, 7]> const_11_to_fp16 = const()[name = tensor<string, []>("const_11_to_fp16"), val = tensor<fp16, [64, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(15040)))];
            tensor<fp16, [64]> const_12_to_fp16 = const()[name = tensor<string, []>("const_12_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(21376)))];
            tensor<fp16, [1, 64, 64, 64]> input_17_cast_fp16 = conv(bias = const_12_to_fp16, dilations = input_15_dilations_0, groups = input_15_groups_0, pad = input_15_pad_0, pad_type = input_15_pad_type_0, strides = input_15_strides_0, weight = const_11_to_fp16, x = input_13_cast_fp16)[name = tensor<string, []>("input_17_cast_fp16")];
            tensor<string, []> input_19_pad_type_0 = const()[name = tensor<string, []>("input_19_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_19_strides_0 = const()[name = tensor<string, []>("input_19_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_19_pad_0 = const()[name = tensor<string, []>("input_19_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_19_dilations_0 = const()[name = tensor<string, []>("input_19_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_19_groups_0 = const()[name = tensor<string, []>("input_19_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [192, 64, 1, 1]> image_encoder_model_network_0_0_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_0_0_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [192, 64, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(21568)))];
            tensor<fp16, [192]> image_encoder_model_network_0_0_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_0_0_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [192]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(46208)))];
            tensor<fp16, [1, 192, 64, 64]> input_19_cast_fp16 = conv(bias = image_encoder_model_network_0_0_convffn_fc1_bias_to_fp16, dilations = input_19_dilations_0, groups = input_19_groups_0, pad = input_19_pad_0, pad_type = input_19_pad_type_0, strides = input_19_strides_0, weight = image_encoder_model_network_0_0_convffn_fc1_weight_to_fp16, x = input_17_cast_fp16)[name = tensor<string, []>("input_19_cast_fp16")];
            tensor<string, []> input_21_mode_0 = const()[name = tensor<string, []>("input_21_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 192, 64, 64]> input_21_cast_fp16 = gelu(mode = input_21_mode_0, x = input_19_cast_fp16)[name = tensor<string, []>("input_21_cast_fp16")];
            tensor<string, []> input_25_pad_type_0 = const()[name = tensor<string, []>("input_25_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_25_strides_0 = const()[name = tensor<string, []>("input_25_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_25_pad_0 = const()[name = tensor<string, []>("input_25_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_25_dilations_0 = const()[name = tensor<string, []>("input_25_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_25_groups_0 = const()[name = tensor<string, []>("input_25_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [64, 192, 1, 1]> var_119_weight_0_to_fp16 = const()[name = tensor<string, []>("op_119_weight_0_to_fp16"), val = tensor<fp16, [64, 192, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(46656)))];
            tensor<fp16, [64]> var_119_bias_0_to_fp16 = const()[name = tensor<string, []>("op_119_bias_0_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(71296)))];
            tensor<fp16, [1, 64, 64, 64]> var_119_cast_fp16 = conv(bias = var_119_bias_0_to_fp16, dilations = input_25_dilations_0, groups = input_25_groups_0, pad = input_25_pad_0, pad_type = input_25_pad_type_0, strides = input_25_strides_0, weight = var_119_weight_0_to_fp16, x = input_21_cast_fp16)[name = tensor<string, []>("op_119_cast_fp16")];
            tensor<fp16, [1, 64, 64, 64]> input_27_cast_fp16 = add(x = input_13_cast_fp16, y = var_119_cast_fp16)[name = tensor<string, []>("input_27_cast_fp16")];
            tensor<string, []> input_29_pad_type_0 = const()[name = tensor<string, []>("input_29_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_29_pad_0 = const()[name = tensor<string, []>("input_29_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, []> input_29_groups_0 = const()[name = tensor<string, []>("input_29_groups_0"), val = tensor<int32, []>(64)];
            tensor<int32, [2]> input_29_strides_0 = const()[name = tensor<string, []>("input_29_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_29_dilations_0 = const()[name = tensor<string, []>("input_29_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [64, 1, 3, 3]> image_encoder_model_network_0_1_token_mixer_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_0_1_token_mixer_reparam_conv_weight_to_fp16"), val = tensor<fp16, [64, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(71488)))];
            tensor<fp16, [64]> image_encoder_model_network_0_1_token_mixer_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_0_1_token_mixer_reparam_conv_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(72704)))];
            tensor<fp16, [1, 64, 64, 64]> input_29_cast_fp16 = conv(bias = image_encoder_model_network_0_1_token_mixer_reparam_conv_bias_to_fp16, dilations = input_29_dilations_0, groups = input_29_groups_0, pad = input_29_pad_0, pad_type = input_29_pad_type_0, strides = input_29_strides_0, weight = image_encoder_model_network_0_1_token_mixer_reparam_conv_weight_to_fp16, x = input_27_cast_fp16)[name = tensor<string, []>("input_29_cast_fp16")];
            tensor<string, []> input_31_pad_type_0 = const()[name = tensor<string, []>("input_31_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_31_pad_0 = const()[name = tensor<string, []>("input_31_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_31_groups_0 = const()[name = tensor<string, []>("input_31_groups_0"), val = tensor<int32, []>(64)];
            tensor<int32, [2]> input_31_strides_0 = const()[name = tensor<string, []>("input_31_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_31_dilations_0 = const()[name = tensor<string, []>("input_31_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [64, 1, 7, 7]> const_13_to_fp16 = const()[name = tensor<string, []>("const_13_to_fp16"), val = tensor<fp16, [64, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(72896)))];
            tensor<fp16, [64]> const_14_to_fp16 = const()[name = tensor<string, []>("const_14_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(79232)))];
            tensor<fp16, [1, 64, 64, 64]> input_33_cast_fp16 = conv(bias = const_14_to_fp16, dilations = input_31_dilations_0, groups = input_31_groups_0, pad = input_31_pad_0, pad_type = input_31_pad_type_0, strides = input_31_strides_0, weight = const_13_to_fp16, x = input_29_cast_fp16)[name = tensor<string, []>("input_33_cast_fp16")];
            tensor<string, []> input_35_pad_type_0 = const()[name = tensor<string, []>("input_35_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_35_strides_0 = const()[name = tensor<string, []>("input_35_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_35_pad_0 = const()[name = tensor<string, []>("input_35_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_35_dilations_0 = const()[name = tensor<string, []>("input_35_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_35_groups_0 = const()[name = tensor<string, []>("input_35_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [192, 64, 1, 1]> image_encoder_model_network_0_1_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_0_1_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [192, 64, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(79424)))];
            tensor<fp16, [192]> image_encoder_model_network_0_1_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_0_1_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [192]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(104064)))];
            tensor<fp16, [1, 192, 64, 64]> input_35_cast_fp16 = conv(bias = image_encoder_model_network_0_1_convffn_fc1_bias_to_fp16, dilations = input_35_dilations_0, groups = input_35_groups_0, pad = input_35_pad_0, pad_type = input_35_pad_type_0, strides = input_35_strides_0, weight = image_encoder_model_network_0_1_convffn_fc1_weight_to_fp16, x = input_33_cast_fp16)[name = tensor<string, []>("input_35_cast_fp16")];
            tensor<string, []> input_37_mode_0 = const()[name = tensor<string, []>("input_37_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 192, 64, 64]> input_37_cast_fp16 = gelu(mode = input_37_mode_0, x = input_35_cast_fp16)[name = tensor<string, []>("input_37_cast_fp16")];
            tensor<string, []> input_41_pad_type_0 = const()[name = tensor<string, []>("input_41_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_41_strides_0 = const()[name = tensor<string, []>("input_41_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_41_pad_0 = const()[name = tensor<string, []>("input_41_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_41_dilations_0 = const()[name = tensor<string, []>("input_41_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_41_groups_0 = const()[name = tensor<string, []>("input_41_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [64, 192, 1, 1]> var_165_weight_0_to_fp16 = const()[name = tensor<string, []>("op_165_weight_0_to_fp16"), val = tensor<fp16, [64, 192, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(104512)))];
            tensor<fp16, [64]> var_165_bias_0_to_fp16 = const()[name = tensor<string, []>("op_165_bias_0_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(129152)))];
            tensor<fp16, [1, 64, 64, 64]> var_165_cast_fp16 = conv(bias = var_165_bias_0_to_fp16, dilations = input_41_dilations_0, groups = input_41_groups_0, pad = input_41_pad_0, pad_type = input_41_pad_type_0, strides = input_41_strides_0, weight = var_165_weight_0_to_fp16, x = input_37_cast_fp16)[name = tensor<string, []>("op_165_cast_fp16")];
            tensor<fp16, [1, 64, 64, 64]> input_43_cast_fp16 = add(x = input_29_cast_fp16, y = var_165_cast_fp16)[name = tensor<string, []>("input_43_cast_fp16")];
            tensor<string, []> input_45_pad_type_0 = const()[name = tensor<string, []>("input_45_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_45_pad_0 = const()[name = tensor<string, []>("input_45_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, [2]> input_45_strides_0 = const()[name = tensor<string, []>("input_45_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, []> input_45_groups_0 = const()[name = tensor<string, []>("input_45_groups_0"), val = tensor<int32, []>(64)];
            tensor<int32, [2]> input_45_dilations_0 = const()[name = tensor<string, []>("input_45_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [128, 1, 7, 7]> image_encoder_model_network_1_proj_0_lkb_reparam_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_1_proj_0_lkb_reparam_weight_to_fp16"), val = tensor<fp16, [128, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(129344)))];
            tensor<fp16, [128]> image_encoder_model_network_1_proj_0_lkb_reparam_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_1_proj_0_lkb_reparam_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(141952)))];
            tensor<fp16, [1, 128, 32, 32]> input_45_cast_fp16 = conv(bias = image_encoder_model_network_1_proj_0_lkb_reparam_bias_to_fp16, dilations = input_45_dilations_0, groups = input_45_groups_0, pad = input_45_pad_0, pad_type = input_45_pad_type_0, strides = input_45_strides_0, weight = image_encoder_model_network_1_proj_0_lkb_reparam_weight_to_fp16, x = input_43_cast_fp16)[name = tensor<string, []>("input_45_cast_fp16")];
            tensor<string, []> input_47_mode_0 = const()[name = tensor<string, []>("input_47_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 128, 32, 32]> input_47_cast_fp16 = gelu(mode = input_47_mode_0, x = input_45_cast_fp16)[name = tensor<string, []>("input_47_cast_fp16")];
            tensor<string, []> input_49_pad_type_0 = const()[name = tensor<string, []>("input_49_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_49_strides_0 = const()[name = tensor<string, []>("input_49_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_49_pad_0 = const()[name = tensor<string, []>("input_49_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_49_dilations_0 = const()[name = tensor<string, []>("input_49_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_49_groups_0 = const()[name = tensor<string, []>("input_49_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [128, 128, 1, 1]> image_encoder_model_network_1_proj_1_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_1_proj_1_reparam_conv_weight_to_fp16"), val = tensor<fp16, [128, 128, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(142272)))];
            tensor<fp16, [128]> image_encoder_model_network_1_proj_1_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_1_proj_1_reparam_conv_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(175104)))];
            tensor<fp16, [1, 128, 32, 32]> input_49_cast_fp16 = conv(bias = image_encoder_model_network_1_proj_1_reparam_conv_bias_to_fp16, dilations = input_49_dilations_0, groups = input_49_groups_0, pad = input_49_pad_0, pad_type = input_49_pad_type_0, strides = input_49_strides_0, weight = image_encoder_model_network_1_proj_1_reparam_conv_weight_to_fp16, x = input_47_cast_fp16)[name = tensor<string, []>("input_49_cast_fp16")];
            tensor<string, []> input_51_mode_0 = const()[name = tensor<string, []>("input_51_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 128, 32, 32]> input_51_cast_fp16 = gelu(mode = input_51_mode_0, x = input_49_cast_fp16)[name = tensor<string, []>("input_51_cast_fp16")];
            tensor<string, []> input_53_pad_type_0 = const()[name = tensor<string, []>("input_53_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_53_pad_0 = const()[name = tensor<string, []>("input_53_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, []> input_53_groups_0 = const()[name = tensor<string, []>("input_53_groups_0"), val = tensor<int32, []>(128)];
            tensor<int32, [2]> input_53_strides_0 = const()[name = tensor<string, []>("input_53_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_53_dilations_0 = const()[name = tensor<string, []>("input_53_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [128, 1, 3, 3]> image_encoder_model_network_2_0_token_mixer_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_0_token_mixer_reparam_conv_weight_to_fp16"), val = tensor<fp16, [128, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(175424)))];
            tensor<fp16, [128]> image_encoder_model_network_2_0_token_mixer_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_0_token_mixer_reparam_conv_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(177792)))];
            tensor<fp16, [1, 128, 32, 32]> input_53_cast_fp16 = conv(bias = image_encoder_model_network_2_0_token_mixer_reparam_conv_bias_to_fp16, dilations = input_53_dilations_0, groups = input_53_groups_0, pad = input_53_pad_0, pad_type = input_53_pad_type_0, strides = input_53_strides_0, weight = image_encoder_model_network_2_0_token_mixer_reparam_conv_weight_to_fp16, x = input_51_cast_fp16)[name = tensor<string, []>("input_53_cast_fp16")];
            tensor<string, []> input_55_pad_type_0 = const()[name = tensor<string, []>("input_55_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_55_pad_0 = const()[name = tensor<string, []>("input_55_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_55_groups_0 = const()[name = tensor<string, []>("input_55_groups_0"), val = tensor<int32, []>(128)];
            tensor<int32, [2]> input_55_strides_0 = const()[name = tensor<string, []>("input_55_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_55_dilations_0 = const()[name = tensor<string, []>("input_55_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [128, 1, 7, 7]> const_15_to_fp16 = const()[name = tensor<string, []>("const_15_to_fp16"), val = tensor<fp16, [128, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(178112)))];
            tensor<fp16, [128]> const_16_to_fp16 = const()[name = tensor<string, []>("const_16_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(190720)))];
            tensor<fp16, [1, 128, 32, 32]> input_57_cast_fp16 = conv(bias = const_16_to_fp16, dilations = input_55_dilations_0, groups = input_55_groups_0, pad = input_55_pad_0, pad_type = input_55_pad_type_0, strides = input_55_strides_0, weight = const_15_to_fp16, x = input_53_cast_fp16)[name = tensor<string, []>("input_57_cast_fp16")];
            tensor<string, []> input_59_pad_type_0 = const()[name = tensor<string, []>("input_59_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_59_strides_0 = const()[name = tensor<string, []>("input_59_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_59_pad_0 = const()[name = tensor<string, []>("input_59_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_59_dilations_0 = const()[name = tensor<string, []>("input_59_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_59_groups_0 = const()[name = tensor<string, []>("input_59_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [384, 128, 1, 1]> image_encoder_model_network_2_0_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_0_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [384, 128, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(191040)))];
            tensor<fp16, [384]> image_encoder_model_network_2_0_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_0_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(289408)))];
            tensor<fp16, [1, 384, 32, 32]> input_59_cast_fp16 = conv(bias = image_encoder_model_network_2_0_convffn_fc1_bias_to_fp16, dilations = input_59_dilations_0, groups = input_59_groups_0, pad = input_59_pad_0, pad_type = input_59_pad_type_0, strides = input_59_strides_0, weight = image_encoder_model_network_2_0_convffn_fc1_weight_to_fp16, x = input_57_cast_fp16)[name = tensor<string, []>("input_59_cast_fp16")];
            tensor<string, []> input_61_mode_0 = const()[name = tensor<string, []>("input_61_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 384, 32, 32]> input_61_cast_fp16 = gelu(mode = input_61_mode_0, x = input_59_cast_fp16)[name = tensor<string, []>("input_61_cast_fp16")];
            tensor<string, []> input_65_pad_type_0 = const()[name = tensor<string, []>("input_65_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_65_strides_0 = const()[name = tensor<string, []>("input_65_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_65_pad_0 = const()[name = tensor<string, []>("input_65_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_65_dilations_0 = const()[name = tensor<string, []>("input_65_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_65_groups_0 = const()[name = tensor<string, []>("input_65_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [128, 384, 1, 1]> var_238_weight_0_to_fp16 = const()[name = tensor<string, []>("op_238_weight_0_to_fp16"), val = tensor<fp16, [128, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(290240)))];
            tensor<fp16, [128]> var_238_bias_0_to_fp16 = const()[name = tensor<string, []>("op_238_bias_0_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(388608)))];
            tensor<fp16, [1, 128, 32, 32]> var_238_cast_fp16 = conv(bias = var_238_bias_0_to_fp16, dilations = input_65_dilations_0, groups = input_65_groups_0, pad = input_65_pad_0, pad_type = input_65_pad_type_0, strides = input_65_strides_0, weight = var_238_weight_0_to_fp16, x = input_61_cast_fp16)[name = tensor<string, []>("op_238_cast_fp16")];
            tensor<fp16, [1, 128, 32, 32]> input_67_cast_fp16 = add(x = input_53_cast_fp16, y = var_238_cast_fp16)[name = tensor<string, []>("input_67_cast_fp16")];
            tensor<string, []> input_69_pad_type_0 = const()[name = tensor<string, []>("input_69_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_69_pad_0 = const()[name = tensor<string, []>("input_69_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, []> input_69_groups_0 = const()[name = tensor<string, []>("input_69_groups_0"), val = tensor<int32, []>(128)];
            tensor<int32, [2]> input_69_strides_0 = const()[name = tensor<string, []>("input_69_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_69_dilations_0 = const()[name = tensor<string, []>("input_69_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [128, 1, 3, 3]> image_encoder_model_network_2_1_token_mixer_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_1_token_mixer_reparam_conv_weight_to_fp16"), val = tensor<fp16, [128, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(388928)))];
            tensor<fp16, [128]> image_encoder_model_network_2_1_token_mixer_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_1_token_mixer_reparam_conv_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(391296)))];
            tensor<fp16, [1, 128, 32, 32]> input_69_cast_fp16 = conv(bias = image_encoder_model_network_2_1_token_mixer_reparam_conv_bias_to_fp16, dilations = input_69_dilations_0, groups = input_69_groups_0, pad = input_69_pad_0, pad_type = input_69_pad_type_0, strides = input_69_strides_0, weight = image_encoder_model_network_2_1_token_mixer_reparam_conv_weight_to_fp16, x = input_67_cast_fp16)[name = tensor<string, []>("input_69_cast_fp16")];
            tensor<string, []> input_71_pad_type_0 = const()[name = tensor<string, []>("input_71_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_71_pad_0 = const()[name = tensor<string, []>("input_71_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_71_groups_0 = const()[name = tensor<string, []>("input_71_groups_0"), val = tensor<int32, []>(128)];
            tensor<int32, [2]> input_71_strides_0 = const()[name = tensor<string, []>("input_71_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_71_dilations_0 = const()[name = tensor<string, []>("input_71_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [128, 1, 7, 7]> const_17_to_fp16 = const()[name = tensor<string, []>("const_17_to_fp16"), val = tensor<fp16, [128, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(391616)))];
            tensor<fp16, [128]> const_18_to_fp16 = const()[name = tensor<string, []>("const_18_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(404224)))];
            tensor<fp16, [1, 128, 32, 32]> input_73_cast_fp16 = conv(bias = const_18_to_fp16, dilations = input_71_dilations_0, groups = input_71_groups_0, pad = input_71_pad_0, pad_type = input_71_pad_type_0, strides = input_71_strides_0, weight = const_17_to_fp16, x = input_69_cast_fp16)[name = tensor<string, []>("input_73_cast_fp16")];
            tensor<string, []> input_75_pad_type_0 = const()[name = tensor<string, []>("input_75_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_75_strides_0 = const()[name = tensor<string, []>("input_75_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_75_pad_0 = const()[name = tensor<string, []>("input_75_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_75_dilations_0 = const()[name = tensor<string, []>("input_75_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_75_groups_0 = const()[name = tensor<string, []>("input_75_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [384, 128, 1, 1]> image_encoder_model_network_2_1_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_1_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [384, 128, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(404544)))];
            tensor<fp16, [384]> image_encoder_model_network_2_1_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_1_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(502912)))];
            tensor<fp16, [1, 384, 32, 32]> input_75_cast_fp16 = conv(bias = image_encoder_model_network_2_1_convffn_fc1_bias_to_fp16, dilations = input_75_dilations_0, groups = input_75_groups_0, pad = input_75_pad_0, pad_type = input_75_pad_type_0, strides = input_75_strides_0, weight = image_encoder_model_network_2_1_convffn_fc1_weight_to_fp16, x = input_73_cast_fp16)[name = tensor<string, []>("input_75_cast_fp16")];
            tensor<string, []> input_77_mode_0 = const()[name = tensor<string, []>("input_77_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 384, 32, 32]> input_77_cast_fp16 = gelu(mode = input_77_mode_0, x = input_75_cast_fp16)[name = tensor<string, []>("input_77_cast_fp16")];
            tensor<string, []> input_81_pad_type_0 = const()[name = tensor<string, []>("input_81_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_81_strides_0 = const()[name = tensor<string, []>("input_81_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_81_pad_0 = const()[name = tensor<string, []>("input_81_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_81_dilations_0 = const()[name = tensor<string, []>("input_81_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_81_groups_0 = const()[name = tensor<string, []>("input_81_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [128, 384, 1, 1]> var_284_weight_0_to_fp16 = const()[name = tensor<string, []>("op_284_weight_0_to_fp16"), val = tensor<fp16, [128, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(503744)))];
            tensor<fp16, [128]> var_284_bias_0_to_fp16 = const()[name = tensor<string, []>("op_284_bias_0_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(602112)))];
            tensor<fp16, [1, 128, 32, 32]> var_284_cast_fp16 = conv(bias = var_284_bias_0_to_fp16, dilations = input_81_dilations_0, groups = input_81_groups_0, pad = input_81_pad_0, pad_type = input_81_pad_type_0, strides = input_81_strides_0, weight = var_284_weight_0_to_fp16, x = input_77_cast_fp16)[name = tensor<string, []>("op_284_cast_fp16")];
            tensor<fp16, [1, 128, 32, 32]> input_83_cast_fp16 = add(x = input_69_cast_fp16, y = var_284_cast_fp16)[name = tensor<string, []>("input_83_cast_fp16")];
            tensor<string, []> input_85_pad_type_0 = const()[name = tensor<string, []>("input_85_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_85_pad_0 = const()[name = tensor<string, []>("input_85_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, []> input_85_groups_0 = const()[name = tensor<string, []>("input_85_groups_0"), val = tensor<int32, []>(128)];
            tensor<int32, [2]> input_85_strides_0 = const()[name = tensor<string, []>("input_85_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_85_dilations_0 = const()[name = tensor<string, []>("input_85_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [128, 1, 3, 3]> image_encoder_model_network_2_2_token_mixer_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_2_token_mixer_reparam_conv_weight_to_fp16"), val = tensor<fp16, [128, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(602432)))];
            tensor<fp16, [128]> image_encoder_model_network_2_2_token_mixer_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_2_token_mixer_reparam_conv_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(604800)))];
            tensor<fp16, [1, 128, 32, 32]> input_85_cast_fp16 = conv(bias = image_encoder_model_network_2_2_token_mixer_reparam_conv_bias_to_fp16, dilations = input_85_dilations_0, groups = input_85_groups_0, pad = input_85_pad_0, pad_type = input_85_pad_type_0, strides = input_85_strides_0, weight = image_encoder_model_network_2_2_token_mixer_reparam_conv_weight_to_fp16, x = input_83_cast_fp16)[name = tensor<string, []>("input_85_cast_fp16")];
            tensor<string, []> input_87_pad_type_0 = const()[name = tensor<string, []>("input_87_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_87_pad_0 = const()[name = tensor<string, []>("input_87_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_87_groups_0 = const()[name = tensor<string, []>("input_87_groups_0"), val = tensor<int32, []>(128)];
            tensor<int32, [2]> input_87_strides_0 = const()[name = tensor<string, []>("input_87_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_87_dilations_0 = const()[name = tensor<string, []>("input_87_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [128, 1, 7, 7]> const_19_to_fp16 = const()[name = tensor<string, []>("const_19_to_fp16"), val = tensor<fp16, [128, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(605120)))];
            tensor<fp16, [128]> const_20_to_fp16 = const()[name = tensor<string, []>("const_20_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(617728)))];
            tensor<fp16, [1, 128, 32, 32]> input_89_cast_fp16 = conv(bias = const_20_to_fp16, dilations = input_87_dilations_0, groups = input_87_groups_0, pad = input_87_pad_0, pad_type = input_87_pad_type_0, strides = input_87_strides_0, weight = const_19_to_fp16, x = input_85_cast_fp16)[name = tensor<string, []>("input_89_cast_fp16")];
            tensor<string, []> input_91_pad_type_0 = const()[name = tensor<string, []>("input_91_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_91_strides_0 = const()[name = tensor<string, []>("input_91_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_91_pad_0 = const()[name = tensor<string, []>("input_91_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_91_dilations_0 = const()[name = tensor<string, []>("input_91_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_91_groups_0 = const()[name = tensor<string, []>("input_91_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [384, 128, 1, 1]> image_encoder_model_network_2_2_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_2_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [384, 128, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(618048)))];
            tensor<fp16, [384]> image_encoder_model_network_2_2_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_2_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(716416)))];
            tensor<fp16, [1, 384, 32, 32]> input_91_cast_fp16 = conv(bias = image_encoder_model_network_2_2_convffn_fc1_bias_to_fp16, dilations = input_91_dilations_0, groups = input_91_groups_0, pad = input_91_pad_0, pad_type = input_91_pad_type_0, strides = input_91_strides_0, weight = image_encoder_model_network_2_2_convffn_fc1_weight_to_fp16, x = input_89_cast_fp16)[name = tensor<string, []>("input_91_cast_fp16")];
            tensor<string, []> input_93_mode_0 = const()[name = tensor<string, []>("input_93_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 384, 32, 32]> input_93_cast_fp16 = gelu(mode = input_93_mode_0, x = input_91_cast_fp16)[name = tensor<string, []>("input_93_cast_fp16")];
            tensor<string, []> input_97_pad_type_0 = const()[name = tensor<string, []>("input_97_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_97_strides_0 = const()[name = tensor<string, []>("input_97_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_97_pad_0 = const()[name = tensor<string, []>("input_97_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_97_dilations_0 = const()[name = tensor<string, []>("input_97_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_97_groups_0 = const()[name = tensor<string, []>("input_97_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [128, 384, 1, 1]> var_330_weight_0_to_fp16 = const()[name = tensor<string, []>("op_330_weight_0_to_fp16"), val = tensor<fp16, [128, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(717248)))];
            tensor<fp16, [128]> var_330_bias_0_to_fp16 = const()[name = tensor<string, []>("op_330_bias_0_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(815616)))];
            tensor<fp16, [1, 128, 32, 32]> var_330_cast_fp16 = conv(bias = var_330_bias_0_to_fp16, dilations = input_97_dilations_0, groups = input_97_groups_0, pad = input_97_pad_0, pad_type = input_97_pad_type_0, strides = input_97_strides_0, weight = var_330_weight_0_to_fp16, x = input_93_cast_fp16)[name = tensor<string, []>("op_330_cast_fp16")];
            tensor<fp16, [1, 128, 32, 32]> input_99_cast_fp16 = add(x = input_85_cast_fp16, y = var_330_cast_fp16)[name = tensor<string, []>("input_99_cast_fp16")];
            tensor<string, []> input_101_pad_type_0 = const()[name = tensor<string, []>("input_101_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_101_pad_0 = const()[name = tensor<string, []>("input_101_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, []> input_101_groups_0 = const()[name = tensor<string, []>("input_101_groups_0"), val = tensor<int32, []>(128)];
            tensor<int32, [2]> input_101_strides_0 = const()[name = tensor<string, []>("input_101_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_101_dilations_0 = const()[name = tensor<string, []>("input_101_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [128, 1, 3, 3]> image_encoder_model_network_2_3_token_mixer_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_3_token_mixer_reparam_conv_weight_to_fp16"), val = tensor<fp16, [128, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(815936)))];
            tensor<fp16, [128]> image_encoder_model_network_2_3_token_mixer_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_3_token_mixer_reparam_conv_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(818304)))];
            tensor<fp16, [1, 128, 32, 32]> input_101_cast_fp16 = conv(bias = image_encoder_model_network_2_3_token_mixer_reparam_conv_bias_to_fp16, dilations = input_101_dilations_0, groups = input_101_groups_0, pad = input_101_pad_0, pad_type = input_101_pad_type_0, strides = input_101_strides_0, weight = image_encoder_model_network_2_3_token_mixer_reparam_conv_weight_to_fp16, x = input_99_cast_fp16)[name = tensor<string, []>("input_101_cast_fp16")];
            tensor<string, []> input_103_pad_type_0 = const()[name = tensor<string, []>("input_103_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_103_pad_0 = const()[name = tensor<string, []>("input_103_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_103_groups_0 = const()[name = tensor<string, []>("input_103_groups_0"), val = tensor<int32, []>(128)];
            tensor<int32, [2]> input_103_strides_0 = const()[name = tensor<string, []>("input_103_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_103_dilations_0 = const()[name = tensor<string, []>("input_103_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [128, 1, 7, 7]> const_21_to_fp16 = const()[name = tensor<string, []>("const_21_to_fp16"), val = tensor<fp16, [128, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(818624)))];
            tensor<fp16, [128]> const_22_to_fp16 = const()[name = tensor<string, []>("const_22_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(831232)))];
            tensor<fp16, [1, 128, 32, 32]> input_105_cast_fp16 = conv(bias = const_22_to_fp16, dilations = input_103_dilations_0, groups = input_103_groups_0, pad = input_103_pad_0, pad_type = input_103_pad_type_0, strides = input_103_strides_0, weight = const_21_to_fp16, x = input_101_cast_fp16)[name = tensor<string, []>("input_105_cast_fp16")];
            tensor<string, []> input_107_pad_type_0 = const()[name = tensor<string, []>("input_107_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_107_strides_0 = const()[name = tensor<string, []>("input_107_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_107_pad_0 = const()[name = tensor<string, []>("input_107_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_107_dilations_0 = const()[name = tensor<string, []>("input_107_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_107_groups_0 = const()[name = tensor<string, []>("input_107_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [384, 128, 1, 1]> image_encoder_model_network_2_3_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_3_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [384, 128, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(831552)))];
            tensor<fp16, [384]> image_encoder_model_network_2_3_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_3_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(929920)))];
            tensor<fp16, [1, 384, 32, 32]> input_107_cast_fp16 = conv(bias = image_encoder_model_network_2_3_convffn_fc1_bias_to_fp16, dilations = input_107_dilations_0, groups = input_107_groups_0, pad = input_107_pad_0, pad_type = input_107_pad_type_0, strides = input_107_strides_0, weight = image_encoder_model_network_2_3_convffn_fc1_weight_to_fp16, x = input_105_cast_fp16)[name = tensor<string, []>("input_107_cast_fp16")];
            tensor<string, []> input_109_mode_0 = const()[name = tensor<string, []>("input_109_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 384, 32, 32]> input_109_cast_fp16 = gelu(mode = input_109_mode_0, x = input_107_cast_fp16)[name = tensor<string, []>("input_109_cast_fp16")];
            tensor<string, []> input_113_pad_type_0 = const()[name = tensor<string, []>("input_113_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_113_strides_0 = const()[name = tensor<string, []>("input_113_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_113_pad_0 = const()[name = tensor<string, []>("input_113_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_113_dilations_0 = const()[name = tensor<string, []>("input_113_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_113_groups_0 = const()[name = tensor<string, []>("input_113_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [128, 384, 1, 1]> var_376_weight_0_to_fp16 = const()[name = tensor<string, []>("op_376_weight_0_to_fp16"), val = tensor<fp16, [128, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(930752)))];
            tensor<fp16, [128]> var_376_bias_0_to_fp16 = const()[name = tensor<string, []>("op_376_bias_0_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1029120)))];
            tensor<fp16, [1, 128, 32, 32]> var_376_cast_fp16 = conv(bias = var_376_bias_0_to_fp16, dilations = input_113_dilations_0, groups = input_113_groups_0, pad = input_113_pad_0, pad_type = input_113_pad_type_0, strides = input_113_strides_0, weight = var_376_weight_0_to_fp16, x = input_109_cast_fp16)[name = tensor<string, []>("op_376_cast_fp16")];
            tensor<fp16, [1, 128, 32, 32]> input_115_cast_fp16 = add(x = input_101_cast_fp16, y = var_376_cast_fp16)[name = tensor<string, []>("input_115_cast_fp16")];
            tensor<string, []> input_117_pad_type_0 = const()[name = tensor<string, []>("input_117_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_117_pad_0 = const()[name = tensor<string, []>("input_117_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, []> input_117_groups_0 = const()[name = tensor<string, []>("input_117_groups_0"), val = tensor<int32, []>(128)];
            tensor<int32, [2]> input_117_strides_0 = const()[name = tensor<string, []>("input_117_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_117_dilations_0 = const()[name = tensor<string, []>("input_117_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [128, 1, 3, 3]> image_encoder_model_network_2_4_token_mixer_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_4_token_mixer_reparam_conv_weight_to_fp16"), val = tensor<fp16, [128, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1029440)))];
            tensor<fp16, [128]> image_encoder_model_network_2_4_token_mixer_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_4_token_mixer_reparam_conv_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1031808)))];
            tensor<fp16, [1, 128, 32, 32]> input_117_cast_fp16 = conv(bias = image_encoder_model_network_2_4_token_mixer_reparam_conv_bias_to_fp16, dilations = input_117_dilations_0, groups = input_117_groups_0, pad = input_117_pad_0, pad_type = input_117_pad_type_0, strides = input_117_strides_0, weight = image_encoder_model_network_2_4_token_mixer_reparam_conv_weight_to_fp16, x = input_115_cast_fp16)[name = tensor<string, []>("input_117_cast_fp16")];
            tensor<string, []> input_119_pad_type_0 = const()[name = tensor<string, []>("input_119_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_119_pad_0 = const()[name = tensor<string, []>("input_119_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_119_groups_0 = const()[name = tensor<string, []>("input_119_groups_0"), val = tensor<int32, []>(128)];
            tensor<int32, [2]> input_119_strides_0 = const()[name = tensor<string, []>("input_119_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_119_dilations_0 = const()[name = tensor<string, []>("input_119_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [128, 1, 7, 7]> const_23_to_fp16 = const()[name = tensor<string, []>("const_23_to_fp16"), val = tensor<fp16, [128, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1032128)))];
            tensor<fp16, [128]> const_24_to_fp16 = const()[name = tensor<string, []>("const_24_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1044736)))];
            tensor<fp16, [1, 128, 32, 32]> input_121_cast_fp16 = conv(bias = const_24_to_fp16, dilations = input_119_dilations_0, groups = input_119_groups_0, pad = input_119_pad_0, pad_type = input_119_pad_type_0, strides = input_119_strides_0, weight = const_23_to_fp16, x = input_117_cast_fp16)[name = tensor<string, []>("input_121_cast_fp16")];
            tensor<string, []> input_123_pad_type_0 = const()[name = tensor<string, []>("input_123_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_123_strides_0 = const()[name = tensor<string, []>("input_123_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_123_pad_0 = const()[name = tensor<string, []>("input_123_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_123_dilations_0 = const()[name = tensor<string, []>("input_123_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_123_groups_0 = const()[name = tensor<string, []>("input_123_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [384, 128, 1, 1]> image_encoder_model_network_2_4_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_4_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [384, 128, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1045056)))];
            tensor<fp16, [384]> image_encoder_model_network_2_4_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_4_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1143424)))];
            tensor<fp16, [1, 384, 32, 32]> input_123_cast_fp16 = conv(bias = image_encoder_model_network_2_4_convffn_fc1_bias_to_fp16, dilations = input_123_dilations_0, groups = input_123_groups_0, pad = input_123_pad_0, pad_type = input_123_pad_type_0, strides = input_123_strides_0, weight = image_encoder_model_network_2_4_convffn_fc1_weight_to_fp16, x = input_121_cast_fp16)[name = tensor<string, []>("input_123_cast_fp16")];
            tensor<string, []> input_125_mode_0 = const()[name = tensor<string, []>("input_125_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 384, 32, 32]> input_125_cast_fp16 = gelu(mode = input_125_mode_0, x = input_123_cast_fp16)[name = tensor<string, []>("input_125_cast_fp16")];
            tensor<string, []> input_129_pad_type_0 = const()[name = tensor<string, []>("input_129_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_129_strides_0 = const()[name = tensor<string, []>("input_129_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_129_pad_0 = const()[name = tensor<string, []>("input_129_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_129_dilations_0 = const()[name = tensor<string, []>("input_129_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_129_groups_0 = const()[name = tensor<string, []>("input_129_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [128, 384, 1, 1]> var_422_weight_0_to_fp16 = const()[name = tensor<string, []>("op_422_weight_0_to_fp16"), val = tensor<fp16, [128, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1144256)))];
            tensor<fp16, [128]> var_422_bias_0_to_fp16 = const()[name = tensor<string, []>("op_422_bias_0_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1242624)))];
            tensor<fp16, [1, 128, 32, 32]> var_422_cast_fp16 = conv(bias = var_422_bias_0_to_fp16, dilations = input_129_dilations_0, groups = input_129_groups_0, pad = input_129_pad_0, pad_type = input_129_pad_type_0, strides = input_129_strides_0, weight = var_422_weight_0_to_fp16, x = input_125_cast_fp16)[name = tensor<string, []>("op_422_cast_fp16")];
            tensor<fp16, [1, 128, 32, 32]> input_131_cast_fp16 = add(x = input_117_cast_fp16, y = var_422_cast_fp16)[name = tensor<string, []>("input_131_cast_fp16")];
            tensor<string, []> input_133_pad_type_0 = const()[name = tensor<string, []>("input_133_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_133_pad_0 = const()[name = tensor<string, []>("input_133_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, []> input_133_groups_0 = const()[name = tensor<string, []>("input_133_groups_0"), val = tensor<int32, []>(128)];
            tensor<int32, [2]> input_133_strides_0 = const()[name = tensor<string, []>("input_133_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_133_dilations_0 = const()[name = tensor<string, []>("input_133_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [128, 1, 3, 3]> image_encoder_model_network_2_5_token_mixer_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_5_token_mixer_reparam_conv_weight_to_fp16"), val = tensor<fp16, [128, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1242944)))];
            tensor<fp16, [128]> image_encoder_model_network_2_5_token_mixer_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_5_token_mixer_reparam_conv_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1245312)))];
            tensor<fp16, [1, 128, 32, 32]> input_133_cast_fp16 = conv(bias = image_encoder_model_network_2_5_token_mixer_reparam_conv_bias_to_fp16, dilations = input_133_dilations_0, groups = input_133_groups_0, pad = input_133_pad_0, pad_type = input_133_pad_type_0, strides = input_133_strides_0, weight = image_encoder_model_network_2_5_token_mixer_reparam_conv_weight_to_fp16, x = input_131_cast_fp16)[name = tensor<string, []>("input_133_cast_fp16")];
            tensor<string, []> input_135_pad_type_0 = const()[name = tensor<string, []>("input_135_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_135_pad_0 = const()[name = tensor<string, []>("input_135_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_135_groups_0 = const()[name = tensor<string, []>("input_135_groups_0"), val = tensor<int32, []>(128)];
            tensor<int32, [2]> input_135_strides_0 = const()[name = tensor<string, []>("input_135_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_135_dilations_0 = const()[name = tensor<string, []>("input_135_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [128, 1, 7, 7]> const_25_to_fp16 = const()[name = tensor<string, []>("const_25_to_fp16"), val = tensor<fp16, [128, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1245632)))];
            tensor<fp16, [128]> const_26_to_fp16 = const()[name = tensor<string, []>("const_26_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1258240)))];
            tensor<fp16, [1, 128, 32, 32]> input_137_cast_fp16 = conv(bias = const_26_to_fp16, dilations = input_135_dilations_0, groups = input_135_groups_0, pad = input_135_pad_0, pad_type = input_135_pad_type_0, strides = input_135_strides_0, weight = const_25_to_fp16, x = input_133_cast_fp16)[name = tensor<string, []>("input_137_cast_fp16")];
            tensor<string, []> input_139_pad_type_0 = const()[name = tensor<string, []>("input_139_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_139_strides_0 = const()[name = tensor<string, []>("input_139_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_139_pad_0 = const()[name = tensor<string, []>("input_139_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_139_dilations_0 = const()[name = tensor<string, []>("input_139_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_139_groups_0 = const()[name = tensor<string, []>("input_139_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [384, 128, 1, 1]> image_encoder_model_network_2_5_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_5_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [384, 128, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1258560)))];
            tensor<fp16, [384]> image_encoder_model_network_2_5_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_2_5_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1356928)))];
            tensor<fp16, [1, 384, 32, 32]> input_139_cast_fp16 = conv(bias = image_encoder_model_network_2_5_convffn_fc1_bias_to_fp16, dilations = input_139_dilations_0, groups = input_139_groups_0, pad = input_139_pad_0, pad_type = input_139_pad_type_0, strides = input_139_strides_0, weight = image_encoder_model_network_2_5_convffn_fc1_weight_to_fp16, x = input_137_cast_fp16)[name = tensor<string, []>("input_139_cast_fp16")];
            tensor<string, []> input_141_mode_0 = const()[name = tensor<string, []>("input_141_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 384, 32, 32]> input_141_cast_fp16 = gelu(mode = input_141_mode_0, x = input_139_cast_fp16)[name = tensor<string, []>("input_141_cast_fp16")];
            tensor<string, []> input_145_pad_type_0 = const()[name = tensor<string, []>("input_145_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_145_strides_0 = const()[name = tensor<string, []>("input_145_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_145_pad_0 = const()[name = tensor<string, []>("input_145_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_145_dilations_0 = const()[name = tensor<string, []>("input_145_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_145_groups_0 = const()[name = tensor<string, []>("input_145_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [128, 384, 1, 1]> var_468_weight_0_to_fp16 = const()[name = tensor<string, []>("op_468_weight_0_to_fp16"), val = tensor<fp16, [128, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1357760)))];
            tensor<fp16, [128]> var_468_bias_0_to_fp16 = const()[name = tensor<string, []>("op_468_bias_0_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1456128)))];
            tensor<fp16, [1, 128, 32, 32]> var_468_cast_fp16 = conv(bias = var_468_bias_0_to_fp16, dilations = input_145_dilations_0, groups = input_145_groups_0, pad = input_145_pad_0, pad_type = input_145_pad_type_0, strides = input_145_strides_0, weight = var_468_weight_0_to_fp16, x = input_141_cast_fp16)[name = tensor<string, []>("op_468_cast_fp16")];
            tensor<fp16, [1, 128, 32, 32]> input_147_cast_fp16 = add(x = input_133_cast_fp16, y = var_468_cast_fp16)[name = tensor<string, []>("input_147_cast_fp16")];
            tensor<string, []> x_1_pad_type_0 = const()[name = tensor<string, []>("x_1_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> x_1_pad_0 = const()[name = tensor<string, []>("x_1_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, [2]> x_1_strides_0 = const()[name = tensor<string, []>("x_1_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, []> x_1_groups_0 = const()[name = tensor<string, []>("x_1_groups_0"), val = tensor<int32, []>(128)];
            tensor<int32, [2]> x_1_dilations_0 = const()[name = tensor<string, []>("x_1_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 7, 7]> image_encoder_model_network_3_proj_0_lkb_reparam_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_3_proj_0_lkb_reparam_weight_to_fp16"), val = tensor<fp16, [256, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1456448)))];
            tensor<fp16, [256]> image_encoder_model_network_3_proj_0_lkb_reparam_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_3_proj_0_lkb_reparam_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1481600)))];
            tensor<fp16, [1, 256, 16, 16]> x_1_cast_fp16 = conv(bias = image_encoder_model_network_3_proj_0_lkb_reparam_bias_to_fp16, dilations = x_1_dilations_0, groups = x_1_groups_0, pad = x_1_pad_0, pad_type = x_1_pad_type_0, strides = x_1_strides_0, weight = image_encoder_model_network_3_proj_0_lkb_reparam_weight_to_fp16, x = input_147_cast_fp16)[name = tensor<string, []>("x_1_cast_fp16")];
            tensor<int32, [2]> input_149_axes_0 = const()[name = tensor<string, []>("input_149_axes_0"), val = tensor<int32, [2]>([2, 3])];
            tensor<fp16, [1, 256, 1, 1]> input_149_cast_fp16 = reduce_mean(axes = input_149_axes_0, keep_dims = var_4, x = x_1_cast_fp16)[name = tensor<string, []>("input_149_cast_fp16")];
            tensor<string, []> input_151_pad_type_0 = const()[name = tensor<string, []>("input_151_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_151_strides_0 = const()[name = tensor<string, []>("input_151_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_151_pad_0 = const()[name = tensor<string, []>("input_151_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_151_dilations_0 = const()[name = tensor<string, []>("input_151_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_151_groups_0 = const()[name = tensor<string, []>("input_151_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [64, 256, 1, 1]> image_encoder_model_network_3_proj_0_se_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_3_proj_0_se_fc1_weight_to_fp16"), val = tensor<fp16, [64, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1482176)))];
            tensor<fp16, [64]> image_encoder_model_network_3_proj_0_se_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_3_proj_0_se_fc1_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1515008)))];
            tensor<fp16, [1, 64, 1, 1]> input_151_cast_fp16 = conv(bias = image_encoder_model_network_3_proj_0_se_fc1_bias_to_fp16, dilations = input_151_dilations_0, groups = input_151_groups_0, pad = input_151_pad_0, pad_type = input_151_pad_type_0, strides = input_151_strides_0, weight = image_encoder_model_network_3_proj_0_se_fc1_weight_to_fp16, x = input_149_cast_fp16)[name = tensor<string, []>("input_151_cast_fp16")];
            tensor<fp16, [1, 64, 1, 1]> input_153_cast_fp16 = relu(x = input_151_cast_fp16)[name = tensor<string, []>("input_153_cast_fp16")];
            tensor<string, []> x_3_pad_type_0 = const()[name = tensor<string, []>("x_3_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> x_3_strides_0 = const()[name = tensor<string, []>("x_3_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> x_3_pad_0 = const()[name = tensor<string, []>("x_3_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> x_3_dilations_0 = const()[name = tensor<string, []>("x_3_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> x_3_groups_0 = const()[name = tensor<string, []>("x_3_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [256, 64, 1, 1]> image_encoder_model_network_3_proj_0_se_fc2_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_3_proj_0_se_fc2_weight_to_fp16"), val = tensor<fp16, [256, 64, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1515200)))];
            tensor<fp16, [256]> image_encoder_model_network_3_proj_0_se_fc2_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_3_proj_0_se_fc2_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1548032)))];
            tensor<fp16, [1, 256, 1, 1]> x_3_cast_fp16 = conv(bias = image_encoder_model_network_3_proj_0_se_fc2_bias_to_fp16, dilations = x_3_dilations_0, groups = x_3_groups_0, pad = x_3_pad_0, pad_type = x_3_pad_type_0, strides = x_3_strides_0, weight = image_encoder_model_network_3_proj_0_se_fc2_weight_to_fp16, x = input_153_cast_fp16)[name = tensor<string, []>("x_3_cast_fp16")];
            tensor<fp16, [1, 256, 1, 1]> var_501_cast_fp16 = sigmoid(x = x_3_cast_fp16)[name = tensor<string, []>("op_501_cast_fp16")];
            tensor<fp16, [1, 256, 16, 16]> input_155_cast_fp16 = mul(x = x_1_cast_fp16, y = var_501_cast_fp16)[name = tensor<string, []>("input_155_cast_fp16")];
            tensor<string, []> input_157_mode_0 = const()[name = tensor<string, []>("input_157_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 256, 16, 16]> input_157_cast_fp16 = gelu(mode = input_157_mode_0, x = input_155_cast_fp16)[name = tensor<string, []>("input_157_cast_fp16")];
            tensor<string, []> input_159_pad_type_0 = const()[name = tensor<string, []>("input_159_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_159_strides_0 = const()[name = tensor<string, []>("input_159_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_159_pad_0 = const()[name = tensor<string, []>("input_159_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_159_dilations_0 = const()[name = tensor<string, []>("input_159_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_159_groups_0 = const()[name = tensor<string, []>("input_159_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [256, 256, 1, 1]> image_encoder_model_network_3_proj_1_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_3_proj_1_reparam_conv_weight_to_fp16"), val = tensor<fp16, [256, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1548608)))];
            tensor<fp16, [256]> image_encoder_model_network_3_proj_1_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_3_proj_1_reparam_conv_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1679744)))];
            tensor<fp16, [1, 256, 16, 16]> input_159_cast_fp16 = conv(bias = image_encoder_model_network_3_proj_1_reparam_conv_bias_to_fp16, dilations = input_159_dilations_0, groups = input_159_groups_0, pad = input_159_pad_0, pad_type = input_159_pad_type_0, strides = input_159_strides_0, weight = image_encoder_model_network_3_proj_1_reparam_conv_weight_to_fp16, x = input_157_cast_fp16)[name = tensor<string, []>("input_159_cast_fp16")];
            tensor<string, []> input_161_mode_0 = const()[name = tensor<string, []>("input_161_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 256, 16, 16]> input_161_cast_fp16 = gelu(mode = input_161_mode_0, x = input_159_cast_fp16)[name = tensor<string, []>("input_161_cast_fp16")];
            tensor<string, []> input_163_pad_type_0 = const()[name = tensor<string, []>("input_163_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_163_pad_0 = const()[name = tensor<string, []>("input_163_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, []> input_163_groups_0 = const()[name = tensor<string, []>("input_163_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_163_strides_0 = const()[name = tensor<string, []>("input_163_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_163_dilations_0 = const()[name = tensor<string, []>("input_163_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 3, 3]> image_encoder_model_network_4_0_token_mixer_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_0_token_mixer_reparam_conv_weight_to_fp16"), val = tensor<fp16, [256, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1680320)))];
            tensor<fp16, [256]> image_encoder_model_network_4_0_token_mixer_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_0_token_mixer_reparam_conv_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1684992)))];
            tensor<fp16, [1, 256, 16, 16]> input_163_cast_fp16 = conv(bias = image_encoder_model_network_4_0_token_mixer_reparam_conv_bias_to_fp16, dilations = input_163_dilations_0, groups = input_163_groups_0, pad = input_163_pad_0, pad_type = input_163_pad_type_0, strides = input_163_strides_0, weight = image_encoder_model_network_4_0_token_mixer_reparam_conv_weight_to_fp16, x = input_161_cast_fp16)[name = tensor<string, []>("input_163_cast_fp16")];
            tensor<string, []> input_165_pad_type_0 = const()[name = tensor<string, []>("input_165_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_165_pad_0 = const()[name = tensor<string, []>("input_165_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_165_groups_0 = const()[name = tensor<string, []>("input_165_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_165_strides_0 = const()[name = tensor<string, []>("input_165_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_165_dilations_0 = const()[name = tensor<string, []>("input_165_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 7, 7]> const_27_to_fp16 = const()[name = tensor<string, []>("const_27_to_fp16"), val = tensor<fp16, [256, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1685568)))];
            tensor<fp16, [256]> const_28_to_fp16 = const()[name = tensor<string, []>("const_28_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1710720)))];
            tensor<fp16, [1, 256, 16, 16]> input_167_cast_fp16 = conv(bias = const_28_to_fp16, dilations = input_165_dilations_0, groups = input_165_groups_0, pad = input_165_pad_0, pad_type = input_165_pad_type_0, strides = input_165_strides_0, weight = const_27_to_fp16, x = input_163_cast_fp16)[name = tensor<string, []>("input_167_cast_fp16")];
            tensor<string, []> input_169_pad_type_0 = const()[name = tensor<string, []>("input_169_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_169_strides_0 = const()[name = tensor<string, []>("input_169_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_169_pad_0 = const()[name = tensor<string, []>("input_169_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_169_dilations_0 = const()[name = tensor<string, []>("input_169_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_169_groups_0 = const()[name = tensor<string, []>("input_169_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [768, 256, 1, 1]> image_encoder_model_network_4_0_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_0_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [768, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1711296)))];
            tensor<fp16, [768]> image_encoder_model_network_4_0_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_0_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [768]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2104576)))];
            tensor<fp16, [1, 768, 16, 16]> input_169_cast_fp16 = conv(bias = image_encoder_model_network_4_0_convffn_fc1_bias_to_fp16, dilations = input_169_dilations_0, groups = input_169_groups_0, pad = input_169_pad_0, pad_type = input_169_pad_type_0, strides = input_169_strides_0, weight = image_encoder_model_network_4_0_convffn_fc1_weight_to_fp16, x = input_167_cast_fp16)[name = tensor<string, []>("input_169_cast_fp16")];
            tensor<string, []> input_171_mode_0 = const()[name = tensor<string, []>("input_171_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 768, 16, 16]> input_171_cast_fp16 = gelu(mode = input_171_mode_0, x = input_169_cast_fp16)[name = tensor<string, []>("input_171_cast_fp16")];
            tensor<string, []> input_175_pad_type_0 = const()[name = tensor<string, []>("input_175_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_175_strides_0 = const()[name = tensor<string, []>("input_175_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_175_pad_0 = const()[name = tensor<string, []>("input_175_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_175_dilations_0 = const()[name = tensor<string, []>("input_175_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_175_groups_0 = const()[name = tensor<string, []>("input_175_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [256, 768, 1, 1]> var_567_weight_0_to_fp16 = const()[name = tensor<string, []>("op_567_weight_0_to_fp16"), val = tensor<fp16, [256, 768, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2106176)))];
            tensor<fp16, [256]> var_567_bias_0_to_fp16 = const()[name = tensor<string, []>("op_567_bias_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2499456)))];
            tensor<fp16, [1, 256, 16, 16]> var_567_cast_fp16 = conv(bias = var_567_bias_0_to_fp16, dilations = input_175_dilations_0, groups = input_175_groups_0, pad = input_175_pad_0, pad_type = input_175_pad_type_0, strides = input_175_strides_0, weight = var_567_weight_0_to_fp16, x = input_171_cast_fp16)[name = tensor<string, []>("op_567_cast_fp16")];
            tensor<fp16, [1, 256, 16, 16]> input_177_cast_fp16 = add(x = input_163_cast_fp16, y = var_567_cast_fp16)[name = tensor<string, []>("input_177_cast_fp16")];
            tensor<string, []> input_179_pad_type_0 = const()[name = tensor<string, []>("input_179_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_179_pad_0 = const()[name = tensor<string, []>("input_179_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, []> input_179_groups_0 = const()[name = tensor<string, []>("input_179_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_179_strides_0 = const()[name = tensor<string, []>("input_179_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_179_dilations_0 = const()[name = tensor<string, []>("input_179_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 3, 3]> image_encoder_model_network_4_1_token_mixer_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_1_token_mixer_reparam_conv_weight_to_fp16"), val = tensor<fp16, [256, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2500032)))];
            tensor<fp16, [256]> image_encoder_model_network_4_1_token_mixer_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_1_token_mixer_reparam_conv_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2504704)))];
            tensor<fp16, [1, 256, 16, 16]> input_179_cast_fp16 = conv(bias = image_encoder_model_network_4_1_token_mixer_reparam_conv_bias_to_fp16, dilations = input_179_dilations_0, groups = input_179_groups_0, pad = input_179_pad_0, pad_type = input_179_pad_type_0, strides = input_179_strides_0, weight = image_encoder_model_network_4_1_token_mixer_reparam_conv_weight_to_fp16, x = input_177_cast_fp16)[name = tensor<string, []>("input_179_cast_fp16")];
            tensor<string, []> input_181_pad_type_0 = const()[name = tensor<string, []>("input_181_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_181_pad_0 = const()[name = tensor<string, []>("input_181_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_181_groups_0 = const()[name = tensor<string, []>("input_181_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_181_strides_0 = const()[name = tensor<string, []>("input_181_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_181_dilations_0 = const()[name = tensor<string, []>("input_181_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 7, 7]> const_29_to_fp16 = const()[name = tensor<string, []>("const_29_to_fp16"), val = tensor<fp16, [256, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2505280)))];
            tensor<fp16, [256]> const_30_to_fp16 = const()[name = tensor<string, []>("const_30_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2530432)))];
            tensor<fp16, [1, 256, 16, 16]> input_183_cast_fp16 = conv(bias = const_30_to_fp16, dilations = input_181_dilations_0, groups = input_181_groups_0, pad = input_181_pad_0, pad_type = input_181_pad_type_0, strides = input_181_strides_0, weight = const_29_to_fp16, x = input_179_cast_fp16)[name = tensor<string, []>("input_183_cast_fp16")];
            tensor<string, []> input_185_pad_type_0 = const()[name = tensor<string, []>("input_185_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_185_strides_0 = const()[name = tensor<string, []>("input_185_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_185_pad_0 = const()[name = tensor<string, []>("input_185_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_185_dilations_0 = const()[name = tensor<string, []>("input_185_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_185_groups_0 = const()[name = tensor<string, []>("input_185_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [768, 256, 1, 1]> image_encoder_model_network_4_1_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_1_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [768, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2531008)))];
            tensor<fp16, [768]> image_encoder_model_network_4_1_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_1_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [768]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2924288)))];
            tensor<fp16, [1, 768, 16, 16]> input_185_cast_fp16 = conv(bias = image_encoder_model_network_4_1_convffn_fc1_bias_to_fp16, dilations = input_185_dilations_0, groups = input_185_groups_0, pad = input_185_pad_0, pad_type = input_185_pad_type_0, strides = input_185_strides_0, weight = image_encoder_model_network_4_1_convffn_fc1_weight_to_fp16, x = input_183_cast_fp16)[name = tensor<string, []>("input_185_cast_fp16")];
            tensor<string, []> input_187_mode_0 = const()[name = tensor<string, []>("input_187_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 768, 16, 16]> input_187_cast_fp16 = gelu(mode = input_187_mode_0, x = input_185_cast_fp16)[name = tensor<string, []>("input_187_cast_fp16")];
            tensor<string, []> input_191_pad_type_0 = const()[name = tensor<string, []>("input_191_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_191_strides_0 = const()[name = tensor<string, []>("input_191_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_191_pad_0 = const()[name = tensor<string, []>("input_191_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_191_dilations_0 = const()[name = tensor<string, []>("input_191_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_191_groups_0 = const()[name = tensor<string, []>("input_191_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [256, 768, 1, 1]> var_613_weight_0_to_fp16 = const()[name = tensor<string, []>("op_613_weight_0_to_fp16"), val = tensor<fp16, [256, 768, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2925888)))];
            tensor<fp16, [256]> var_613_bias_0_to_fp16 = const()[name = tensor<string, []>("op_613_bias_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3319168)))];
            tensor<fp16, [1, 256, 16, 16]> var_613_cast_fp16 = conv(bias = var_613_bias_0_to_fp16, dilations = input_191_dilations_0, groups = input_191_groups_0, pad = input_191_pad_0, pad_type = input_191_pad_type_0, strides = input_191_strides_0, weight = var_613_weight_0_to_fp16, x = input_187_cast_fp16)[name = tensor<string, []>("op_613_cast_fp16")];
            tensor<fp16, [1, 256, 16, 16]> input_193_cast_fp16 = add(x = input_179_cast_fp16, y = var_613_cast_fp16)[name = tensor<string, []>("input_193_cast_fp16")];
            tensor<string, []> input_195_pad_type_0 = const()[name = tensor<string, []>("input_195_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_195_pad_0 = const()[name = tensor<string, []>("input_195_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, []> input_195_groups_0 = const()[name = tensor<string, []>("input_195_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_195_strides_0 = const()[name = tensor<string, []>("input_195_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_195_dilations_0 = const()[name = tensor<string, []>("input_195_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 3, 3]> image_encoder_model_network_4_2_token_mixer_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_2_token_mixer_reparam_conv_weight_to_fp16"), val = tensor<fp16, [256, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3319744)))];
            tensor<fp16, [256]> image_encoder_model_network_4_2_token_mixer_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_2_token_mixer_reparam_conv_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3324416)))];
            tensor<fp16, [1, 256, 16, 16]> input_195_cast_fp16 = conv(bias = image_encoder_model_network_4_2_token_mixer_reparam_conv_bias_to_fp16, dilations = input_195_dilations_0, groups = input_195_groups_0, pad = input_195_pad_0, pad_type = input_195_pad_type_0, strides = input_195_strides_0, weight = image_encoder_model_network_4_2_token_mixer_reparam_conv_weight_to_fp16, x = input_193_cast_fp16)[name = tensor<string, []>("input_195_cast_fp16")];
            tensor<string, []> input_197_pad_type_0 = const()[name = tensor<string, []>("input_197_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_197_pad_0 = const()[name = tensor<string, []>("input_197_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_197_groups_0 = const()[name = tensor<string, []>("input_197_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_197_strides_0 = const()[name = tensor<string, []>("input_197_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_197_dilations_0 = const()[name = tensor<string, []>("input_197_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 7, 7]> const_31_to_fp16 = const()[name = tensor<string, []>("const_31_to_fp16"), val = tensor<fp16, [256, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3324992)))];
            tensor<fp16, [256]> const_32_to_fp16 = const()[name = tensor<string, []>("const_32_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3350144)))];
            tensor<fp16, [1, 256, 16, 16]> input_199_cast_fp16 = conv(bias = const_32_to_fp16, dilations = input_197_dilations_0, groups = input_197_groups_0, pad = input_197_pad_0, pad_type = input_197_pad_type_0, strides = input_197_strides_0, weight = const_31_to_fp16, x = input_195_cast_fp16)[name = tensor<string, []>("input_199_cast_fp16")];
            tensor<string, []> input_201_pad_type_0 = const()[name = tensor<string, []>("input_201_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_201_strides_0 = const()[name = tensor<string, []>("input_201_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_201_pad_0 = const()[name = tensor<string, []>("input_201_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_201_dilations_0 = const()[name = tensor<string, []>("input_201_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_201_groups_0 = const()[name = tensor<string, []>("input_201_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [768, 256, 1, 1]> image_encoder_model_network_4_2_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_2_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [768, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3350720)))];
            tensor<fp16, [768]> image_encoder_model_network_4_2_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_2_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [768]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3744000)))];
            tensor<fp16, [1, 768, 16, 16]> input_201_cast_fp16 = conv(bias = image_encoder_model_network_4_2_convffn_fc1_bias_to_fp16, dilations = input_201_dilations_0, groups = input_201_groups_0, pad = input_201_pad_0, pad_type = input_201_pad_type_0, strides = input_201_strides_0, weight = image_encoder_model_network_4_2_convffn_fc1_weight_to_fp16, x = input_199_cast_fp16)[name = tensor<string, []>("input_201_cast_fp16")];
            tensor<string, []> input_203_mode_0 = const()[name = tensor<string, []>("input_203_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 768, 16, 16]> input_203_cast_fp16 = gelu(mode = input_203_mode_0, x = input_201_cast_fp16)[name = tensor<string, []>("input_203_cast_fp16")];
            tensor<string, []> input_207_pad_type_0 = const()[name = tensor<string, []>("input_207_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_207_strides_0 = const()[name = tensor<string, []>("input_207_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_207_pad_0 = const()[name = tensor<string, []>("input_207_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_207_dilations_0 = const()[name = tensor<string, []>("input_207_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_207_groups_0 = const()[name = tensor<string, []>("input_207_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [256, 768, 1, 1]> var_659_weight_0_to_fp16 = const()[name = tensor<string, []>("op_659_weight_0_to_fp16"), val = tensor<fp16, [256, 768, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3745600)))];
            tensor<fp16, [256]> var_659_bias_0_to_fp16 = const()[name = tensor<string, []>("op_659_bias_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4138880)))];
            tensor<fp16, [1, 256, 16, 16]> var_659_cast_fp16 = conv(bias = var_659_bias_0_to_fp16, dilations = input_207_dilations_0, groups = input_207_groups_0, pad = input_207_pad_0, pad_type = input_207_pad_type_0, strides = input_207_strides_0, weight = var_659_weight_0_to_fp16, x = input_203_cast_fp16)[name = tensor<string, []>("op_659_cast_fp16")];
            tensor<fp16, [1, 256, 16, 16]> input_209_cast_fp16 = add(x = input_195_cast_fp16, y = var_659_cast_fp16)[name = tensor<string, []>("input_209_cast_fp16")];
            tensor<string, []> input_211_pad_type_0 = const()[name = tensor<string, []>("input_211_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_211_pad_0 = const()[name = tensor<string, []>("input_211_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, []> input_211_groups_0 = const()[name = tensor<string, []>("input_211_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_211_strides_0 = const()[name = tensor<string, []>("input_211_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_211_dilations_0 = const()[name = tensor<string, []>("input_211_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 3, 3]> image_encoder_model_network_4_3_token_mixer_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_3_token_mixer_reparam_conv_weight_to_fp16"), val = tensor<fp16, [256, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4139456)))];
            tensor<fp16, [256]> image_encoder_model_network_4_3_token_mixer_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_3_token_mixer_reparam_conv_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4144128)))];
            tensor<fp16, [1, 256, 16, 16]> input_211_cast_fp16 = conv(bias = image_encoder_model_network_4_3_token_mixer_reparam_conv_bias_to_fp16, dilations = input_211_dilations_0, groups = input_211_groups_0, pad = input_211_pad_0, pad_type = input_211_pad_type_0, strides = input_211_strides_0, weight = image_encoder_model_network_4_3_token_mixer_reparam_conv_weight_to_fp16, x = input_209_cast_fp16)[name = tensor<string, []>("input_211_cast_fp16")];
            tensor<string, []> input_213_pad_type_0 = const()[name = tensor<string, []>("input_213_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_213_pad_0 = const()[name = tensor<string, []>("input_213_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_213_groups_0 = const()[name = tensor<string, []>("input_213_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_213_strides_0 = const()[name = tensor<string, []>("input_213_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_213_dilations_0 = const()[name = tensor<string, []>("input_213_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 7, 7]> const_33_to_fp16 = const()[name = tensor<string, []>("const_33_to_fp16"), val = tensor<fp16, [256, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4144704)))];
            tensor<fp16, [256]> const_34_to_fp16 = const()[name = tensor<string, []>("const_34_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4169856)))];
            tensor<fp16, [1, 256, 16, 16]> input_215_cast_fp16 = conv(bias = const_34_to_fp16, dilations = input_213_dilations_0, groups = input_213_groups_0, pad = input_213_pad_0, pad_type = input_213_pad_type_0, strides = input_213_strides_0, weight = const_33_to_fp16, x = input_211_cast_fp16)[name = tensor<string, []>("input_215_cast_fp16")];
            tensor<string, []> input_217_pad_type_0 = const()[name = tensor<string, []>("input_217_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_217_strides_0 = const()[name = tensor<string, []>("input_217_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_217_pad_0 = const()[name = tensor<string, []>("input_217_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_217_dilations_0 = const()[name = tensor<string, []>("input_217_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_217_groups_0 = const()[name = tensor<string, []>("input_217_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [768, 256, 1, 1]> image_encoder_model_network_4_3_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_3_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [768, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4170432)))];
            tensor<fp16, [768]> image_encoder_model_network_4_3_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_3_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [768]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4563712)))];
            tensor<fp16, [1, 768, 16, 16]> input_217_cast_fp16 = conv(bias = image_encoder_model_network_4_3_convffn_fc1_bias_to_fp16, dilations = input_217_dilations_0, groups = input_217_groups_0, pad = input_217_pad_0, pad_type = input_217_pad_type_0, strides = input_217_strides_0, weight = image_encoder_model_network_4_3_convffn_fc1_weight_to_fp16, x = input_215_cast_fp16)[name = tensor<string, []>("input_217_cast_fp16")];
            tensor<string, []> input_219_mode_0 = const()[name = tensor<string, []>("input_219_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 768, 16, 16]> input_219_cast_fp16 = gelu(mode = input_219_mode_0, x = input_217_cast_fp16)[name = tensor<string, []>("input_219_cast_fp16")];
            tensor<string, []> input_223_pad_type_0 = const()[name = tensor<string, []>("input_223_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_223_strides_0 = const()[name = tensor<string, []>("input_223_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_223_pad_0 = const()[name = tensor<string, []>("input_223_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_223_dilations_0 = const()[name = tensor<string, []>("input_223_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_223_groups_0 = const()[name = tensor<string, []>("input_223_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [256, 768, 1, 1]> var_705_weight_0_to_fp16 = const()[name = tensor<string, []>("op_705_weight_0_to_fp16"), val = tensor<fp16, [256, 768, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4565312)))];
            tensor<fp16, [256]> var_705_bias_0_to_fp16 = const()[name = tensor<string, []>("op_705_bias_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4958592)))];
            tensor<fp16, [1, 256, 16, 16]> var_705_cast_fp16 = conv(bias = var_705_bias_0_to_fp16, dilations = input_223_dilations_0, groups = input_223_groups_0, pad = input_223_pad_0, pad_type = input_223_pad_type_0, strides = input_223_strides_0, weight = var_705_weight_0_to_fp16, x = input_219_cast_fp16)[name = tensor<string, []>("op_705_cast_fp16")];
            tensor<fp16, [1, 256, 16, 16]> input_225_cast_fp16 = add(x = input_211_cast_fp16, y = var_705_cast_fp16)[name = tensor<string, []>("input_225_cast_fp16")];
            tensor<string, []> input_227_pad_type_0 = const()[name = tensor<string, []>("input_227_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_227_pad_0 = const()[name = tensor<string, []>("input_227_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, []> input_227_groups_0 = const()[name = tensor<string, []>("input_227_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_227_strides_0 = const()[name = tensor<string, []>("input_227_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_227_dilations_0 = const()[name = tensor<string, []>("input_227_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 3, 3]> image_encoder_model_network_4_4_token_mixer_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_4_token_mixer_reparam_conv_weight_to_fp16"), val = tensor<fp16, [256, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4959168)))];
            tensor<fp16, [256]> image_encoder_model_network_4_4_token_mixer_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_4_token_mixer_reparam_conv_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4963840)))];
            tensor<fp16, [1, 256, 16, 16]> input_227_cast_fp16 = conv(bias = image_encoder_model_network_4_4_token_mixer_reparam_conv_bias_to_fp16, dilations = input_227_dilations_0, groups = input_227_groups_0, pad = input_227_pad_0, pad_type = input_227_pad_type_0, strides = input_227_strides_0, weight = image_encoder_model_network_4_4_token_mixer_reparam_conv_weight_to_fp16, x = input_225_cast_fp16)[name = tensor<string, []>("input_227_cast_fp16")];
            tensor<string, []> input_229_pad_type_0 = const()[name = tensor<string, []>("input_229_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_229_pad_0 = const()[name = tensor<string, []>("input_229_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_229_groups_0 = const()[name = tensor<string, []>("input_229_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_229_strides_0 = const()[name = tensor<string, []>("input_229_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_229_dilations_0 = const()[name = tensor<string, []>("input_229_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 7, 7]> const_35_to_fp16 = const()[name = tensor<string, []>("const_35_to_fp16"), val = tensor<fp16, [256, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4964416)))];
            tensor<fp16, [256]> const_36_to_fp16 = const()[name = tensor<string, []>("const_36_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4989568)))];
            tensor<fp16, [1, 256, 16, 16]> input_231_cast_fp16 = conv(bias = const_36_to_fp16, dilations = input_229_dilations_0, groups = input_229_groups_0, pad = input_229_pad_0, pad_type = input_229_pad_type_0, strides = input_229_strides_0, weight = const_35_to_fp16, x = input_227_cast_fp16)[name = tensor<string, []>("input_231_cast_fp16")];
            tensor<string, []> input_233_pad_type_0 = const()[name = tensor<string, []>("input_233_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_233_strides_0 = const()[name = tensor<string, []>("input_233_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_233_pad_0 = const()[name = tensor<string, []>("input_233_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_233_dilations_0 = const()[name = tensor<string, []>("input_233_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_233_groups_0 = const()[name = tensor<string, []>("input_233_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [768, 256, 1, 1]> image_encoder_model_network_4_4_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_4_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [768, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4990144)))];
            tensor<fp16, [768]> image_encoder_model_network_4_4_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_4_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [768]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5383424)))];
            tensor<fp16, [1, 768, 16, 16]> input_233_cast_fp16 = conv(bias = image_encoder_model_network_4_4_convffn_fc1_bias_to_fp16, dilations = input_233_dilations_0, groups = input_233_groups_0, pad = input_233_pad_0, pad_type = input_233_pad_type_0, strides = input_233_strides_0, weight = image_encoder_model_network_4_4_convffn_fc1_weight_to_fp16, x = input_231_cast_fp16)[name = tensor<string, []>("input_233_cast_fp16")];
            tensor<string, []> input_235_mode_0 = const()[name = tensor<string, []>("input_235_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 768, 16, 16]> input_235_cast_fp16 = gelu(mode = input_235_mode_0, x = input_233_cast_fp16)[name = tensor<string, []>("input_235_cast_fp16")];
            tensor<string, []> input_239_pad_type_0 = const()[name = tensor<string, []>("input_239_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_239_strides_0 = const()[name = tensor<string, []>("input_239_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_239_pad_0 = const()[name = tensor<string, []>("input_239_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_239_dilations_0 = const()[name = tensor<string, []>("input_239_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_239_groups_0 = const()[name = tensor<string, []>("input_239_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [256, 768, 1, 1]> var_751_weight_0_to_fp16 = const()[name = tensor<string, []>("op_751_weight_0_to_fp16"), val = tensor<fp16, [256, 768, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5385024)))];
            tensor<fp16, [256]> var_751_bias_0_to_fp16 = const()[name = tensor<string, []>("op_751_bias_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5778304)))];
            tensor<fp16, [1, 256, 16, 16]> var_751_cast_fp16 = conv(bias = var_751_bias_0_to_fp16, dilations = input_239_dilations_0, groups = input_239_groups_0, pad = input_239_pad_0, pad_type = input_239_pad_type_0, strides = input_239_strides_0, weight = var_751_weight_0_to_fp16, x = input_235_cast_fp16)[name = tensor<string, []>("op_751_cast_fp16")];
            tensor<fp16, [1, 256, 16, 16]> input_241_cast_fp16 = add(x = input_227_cast_fp16, y = var_751_cast_fp16)[name = tensor<string, []>("input_241_cast_fp16")];
            tensor<string, []> input_243_pad_type_0 = const()[name = tensor<string, []>("input_243_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_243_pad_0 = const()[name = tensor<string, []>("input_243_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, []> input_243_groups_0 = const()[name = tensor<string, []>("input_243_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_243_strides_0 = const()[name = tensor<string, []>("input_243_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_243_dilations_0 = const()[name = tensor<string, []>("input_243_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 3, 3]> image_encoder_model_network_4_5_token_mixer_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_5_token_mixer_reparam_conv_weight_to_fp16"), val = tensor<fp16, [256, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5778880)))];
            tensor<fp16, [256]> image_encoder_model_network_4_5_token_mixer_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_5_token_mixer_reparam_conv_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5783552)))];
            tensor<fp16, [1, 256, 16, 16]> input_243_cast_fp16 = conv(bias = image_encoder_model_network_4_5_token_mixer_reparam_conv_bias_to_fp16, dilations = input_243_dilations_0, groups = input_243_groups_0, pad = input_243_pad_0, pad_type = input_243_pad_type_0, strides = input_243_strides_0, weight = image_encoder_model_network_4_5_token_mixer_reparam_conv_weight_to_fp16, x = input_241_cast_fp16)[name = tensor<string, []>("input_243_cast_fp16")];
            tensor<string, []> input_245_pad_type_0 = const()[name = tensor<string, []>("input_245_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_245_pad_0 = const()[name = tensor<string, []>("input_245_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_245_groups_0 = const()[name = tensor<string, []>("input_245_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_245_strides_0 = const()[name = tensor<string, []>("input_245_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_245_dilations_0 = const()[name = tensor<string, []>("input_245_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 7, 7]> const_37_to_fp16 = const()[name = tensor<string, []>("const_37_to_fp16"), val = tensor<fp16, [256, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5784128)))];
            tensor<fp16, [256]> const_38_to_fp16 = const()[name = tensor<string, []>("const_38_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5809280)))];
            tensor<fp16, [1, 256, 16, 16]> input_247_cast_fp16 = conv(bias = const_38_to_fp16, dilations = input_245_dilations_0, groups = input_245_groups_0, pad = input_245_pad_0, pad_type = input_245_pad_type_0, strides = input_245_strides_0, weight = const_37_to_fp16, x = input_243_cast_fp16)[name = tensor<string, []>("input_247_cast_fp16")];
            tensor<string, []> input_249_pad_type_0 = const()[name = tensor<string, []>("input_249_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_249_strides_0 = const()[name = tensor<string, []>("input_249_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_249_pad_0 = const()[name = tensor<string, []>("input_249_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_249_dilations_0 = const()[name = tensor<string, []>("input_249_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_249_groups_0 = const()[name = tensor<string, []>("input_249_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [768, 256, 1, 1]> image_encoder_model_network_4_5_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_5_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [768, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5809856)))];
            tensor<fp16, [768]> image_encoder_model_network_4_5_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_5_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [768]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6203136)))];
            tensor<fp16, [1, 768, 16, 16]> input_249_cast_fp16 = conv(bias = image_encoder_model_network_4_5_convffn_fc1_bias_to_fp16, dilations = input_249_dilations_0, groups = input_249_groups_0, pad = input_249_pad_0, pad_type = input_249_pad_type_0, strides = input_249_strides_0, weight = image_encoder_model_network_4_5_convffn_fc1_weight_to_fp16, x = input_247_cast_fp16)[name = tensor<string, []>("input_249_cast_fp16")];
            tensor<string, []> input_251_mode_0 = const()[name = tensor<string, []>("input_251_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 768, 16, 16]> input_251_cast_fp16 = gelu(mode = input_251_mode_0, x = input_249_cast_fp16)[name = tensor<string, []>("input_251_cast_fp16")];
            tensor<string, []> input_255_pad_type_0 = const()[name = tensor<string, []>("input_255_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_255_strides_0 = const()[name = tensor<string, []>("input_255_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_255_pad_0 = const()[name = tensor<string, []>("input_255_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_255_dilations_0 = const()[name = tensor<string, []>("input_255_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_255_groups_0 = const()[name = tensor<string, []>("input_255_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [256, 768, 1, 1]> var_797_weight_0_to_fp16 = const()[name = tensor<string, []>("op_797_weight_0_to_fp16"), val = tensor<fp16, [256, 768, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6204736)))];
            tensor<fp16, [256]> var_797_bias_0_to_fp16 = const()[name = tensor<string, []>("op_797_bias_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6598016)))];
            tensor<fp16, [1, 256, 16, 16]> var_797_cast_fp16 = conv(bias = var_797_bias_0_to_fp16, dilations = input_255_dilations_0, groups = input_255_groups_0, pad = input_255_pad_0, pad_type = input_255_pad_type_0, strides = input_255_strides_0, weight = var_797_weight_0_to_fp16, x = input_251_cast_fp16)[name = tensor<string, []>("op_797_cast_fp16")];
            tensor<fp16, [1, 256, 16, 16]> input_257_cast_fp16 = add(x = input_243_cast_fp16, y = var_797_cast_fp16)[name = tensor<string, []>("input_257_cast_fp16")];
            tensor<string, []> input_259_pad_type_0 = const()[name = tensor<string, []>("input_259_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_259_pad_0 = const()[name = tensor<string, []>("input_259_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, []> input_259_groups_0 = const()[name = tensor<string, []>("input_259_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_259_strides_0 = const()[name = tensor<string, []>("input_259_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_259_dilations_0 = const()[name = tensor<string, []>("input_259_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 3, 3]> image_encoder_model_network_4_6_token_mixer_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_6_token_mixer_reparam_conv_weight_to_fp16"), val = tensor<fp16, [256, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6598592)))];
            tensor<fp16, [256]> image_encoder_model_network_4_6_token_mixer_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_6_token_mixer_reparam_conv_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6603264)))];
            tensor<fp16, [1, 256, 16, 16]> input_259_cast_fp16 = conv(bias = image_encoder_model_network_4_6_token_mixer_reparam_conv_bias_to_fp16, dilations = input_259_dilations_0, groups = input_259_groups_0, pad = input_259_pad_0, pad_type = input_259_pad_type_0, strides = input_259_strides_0, weight = image_encoder_model_network_4_6_token_mixer_reparam_conv_weight_to_fp16, x = input_257_cast_fp16)[name = tensor<string, []>("input_259_cast_fp16")];
            tensor<string, []> input_261_pad_type_0 = const()[name = tensor<string, []>("input_261_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_261_pad_0 = const()[name = tensor<string, []>("input_261_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_261_groups_0 = const()[name = tensor<string, []>("input_261_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_261_strides_0 = const()[name = tensor<string, []>("input_261_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_261_dilations_0 = const()[name = tensor<string, []>("input_261_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 7, 7]> const_39_to_fp16 = const()[name = tensor<string, []>("const_39_to_fp16"), val = tensor<fp16, [256, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6603840)))];
            tensor<fp16, [256]> const_40_to_fp16 = const()[name = tensor<string, []>("const_40_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6628992)))];
            tensor<fp16, [1, 256, 16, 16]> input_263_cast_fp16 = conv(bias = const_40_to_fp16, dilations = input_261_dilations_0, groups = input_261_groups_0, pad = input_261_pad_0, pad_type = input_261_pad_type_0, strides = input_261_strides_0, weight = const_39_to_fp16, x = input_259_cast_fp16)[name = tensor<string, []>("input_263_cast_fp16")];
            tensor<string, []> input_265_pad_type_0 = const()[name = tensor<string, []>("input_265_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_265_strides_0 = const()[name = tensor<string, []>("input_265_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_265_pad_0 = const()[name = tensor<string, []>("input_265_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_265_dilations_0 = const()[name = tensor<string, []>("input_265_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_265_groups_0 = const()[name = tensor<string, []>("input_265_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [768, 256, 1, 1]> image_encoder_model_network_4_6_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_6_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [768, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6629568)))];
            tensor<fp16, [768]> image_encoder_model_network_4_6_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_6_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [768]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(7022848)))];
            tensor<fp16, [1, 768, 16, 16]> input_265_cast_fp16 = conv(bias = image_encoder_model_network_4_6_convffn_fc1_bias_to_fp16, dilations = input_265_dilations_0, groups = input_265_groups_0, pad = input_265_pad_0, pad_type = input_265_pad_type_0, strides = input_265_strides_0, weight = image_encoder_model_network_4_6_convffn_fc1_weight_to_fp16, x = input_263_cast_fp16)[name = tensor<string, []>("input_265_cast_fp16")];
            tensor<string, []> input_267_mode_0 = const()[name = tensor<string, []>("input_267_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 768, 16, 16]> input_267_cast_fp16 = gelu(mode = input_267_mode_0, x = input_265_cast_fp16)[name = tensor<string, []>("input_267_cast_fp16")];
            tensor<string, []> input_271_pad_type_0 = const()[name = tensor<string, []>("input_271_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_271_strides_0 = const()[name = tensor<string, []>("input_271_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_271_pad_0 = const()[name = tensor<string, []>("input_271_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_271_dilations_0 = const()[name = tensor<string, []>("input_271_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_271_groups_0 = const()[name = tensor<string, []>("input_271_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [256, 768, 1, 1]> var_843_weight_0_to_fp16 = const()[name = tensor<string, []>("op_843_weight_0_to_fp16"), val = tensor<fp16, [256, 768, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(7024448)))];
            tensor<fp16, [256]> var_843_bias_0_to_fp16 = const()[name = tensor<string, []>("op_843_bias_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(7417728)))];
            tensor<fp16, [1, 256, 16, 16]> var_843_cast_fp16 = conv(bias = var_843_bias_0_to_fp16, dilations = input_271_dilations_0, groups = input_271_groups_0, pad = input_271_pad_0, pad_type = input_271_pad_type_0, strides = input_271_strides_0, weight = var_843_weight_0_to_fp16, x = input_267_cast_fp16)[name = tensor<string, []>("op_843_cast_fp16")];
            tensor<fp16, [1, 256, 16, 16]> input_273_cast_fp16 = add(x = input_259_cast_fp16, y = var_843_cast_fp16)[name = tensor<string, []>("input_273_cast_fp16")];
            tensor<string, []> input_275_pad_type_0 = const()[name = tensor<string, []>("input_275_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_275_pad_0 = const()[name = tensor<string, []>("input_275_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, []> input_275_groups_0 = const()[name = tensor<string, []>("input_275_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_275_strides_0 = const()[name = tensor<string, []>("input_275_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_275_dilations_0 = const()[name = tensor<string, []>("input_275_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 3, 3]> image_encoder_model_network_4_7_token_mixer_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_7_token_mixer_reparam_conv_weight_to_fp16"), val = tensor<fp16, [256, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(7418304)))];
            tensor<fp16, [256]> image_encoder_model_network_4_7_token_mixer_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_7_token_mixer_reparam_conv_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(7422976)))];
            tensor<fp16, [1, 256, 16, 16]> input_275_cast_fp16 = conv(bias = image_encoder_model_network_4_7_token_mixer_reparam_conv_bias_to_fp16, dilations = input_275_dilations_0, groups = input_275_groups_0, pad = input_275_pad_0, pad_type = input_275_pad_type_0, strides = input_275_strides_0, weight = image_encoder_model_network_4_7_token_mixer_reparam_conv_weight_to_fp16, x = input_273_cast_fp16)[name = tensor<string, []>("input_275_cast_fp16")];
            tensor<string, []> input_277_pad_type_0 = const()[name = tensor<string, []>("input_277_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_277_pad_0 = const()[name = tensor<string, []>("input_277_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_277_groups_0 = const()[name = tensor<string, []>("input_277_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_277_strides_0 = const()[name = tensor<string, []>("input_277_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_277_dilations_0 = const()[name = tensor<string, []>("input_277_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 7, 7]> const_41_to_fp16 = const()[name = tensor<string, []>("const_41_to_fp16"), val = tensor<fp16, [256, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(7423552)))];
            tensor<fp16, [256]> const_42_to_fp16 = const()[name = tensor<string, []>("const_42_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(7448704)))];
            tensor<fp16, [1, 256, 16, 16]> input_279_cast_fp16 = conv(bias = const_42_to_fp16, dilations = input_277_dilations_0, groups = input_277_groups_0, pad = input_277_pad_0, pad_type = input_277_pad_type_0, strides = input_277_strides_0, weight = const_41_to_fp16, x = input_275_cast_fp16)[name = tensor<string, []>("input_279_cast_fp16")];
            tensor<string, []> input_281_pad_type_0 = const()[name = tensor<string, []>("input_281_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_281_strides_0 = const()[name = tensor<string, []>("input_281_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_281_pad_0 = const()[name = tensor<string, []>("input_281_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_281_dilations_0 = const()[name = tensor<string, []>("input_281_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_281_groups_0 = const()[name = tensor<string, []>("input_281_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [768, 256, 1, 1]> image_encoder_model_network_4_7_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_7_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [768, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(7449280)))];
            tensor<fp16, [768]> image_encoder_model_network_4_7_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_7_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [768]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(7842560)))];
            tensor<fp16, [1, 768, 16, 16]> input_281_cast_fp16 = conv(bias = image_encoder_model_network_4_7_convffn_fc1_bias_to_fp16, dilations = input_281_dilations_0, groups = input_281_groups_0, pad = input_281_pad_0, pad_type = input_281_pad_type_0, strides = input_281_strides_0, weight = image_encoder_model_network_4_7_convffn_fc1_weight_to_fp16, x = input_279_cast_fp16)[name = tensor<string, []>("input_281_cast_fp16")];
            tensor<string, []> input_283_mode_0 = const()[name = tensor<string, []>("input_283_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 768, 16, 16]> input_283_cast_fp16 = gelu(mode = input_283_mode_0, x = input_281_cast_fp16)[name = tensor<string, []>("input_283_cast_fp16")];
            tensor<string, []> input_287_pad_type_0 = const()[name = tensor<string, []>("input_287_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_287_strides_0 = const()[name = tensor<string, []>("input_287_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_287_pad_0 = const()[name = tensor<string, []>("input_287_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_287_dilations_0 = const()[name = tensor<string, []>("input_287_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_287_groups_0 = const()[name = tensor<string, []>("input_287_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [256, 768, 1, 1]> var_889_weight_0_to_fp16 = const()[name = tensor<string, []>("op_889_weight_0_to_fp16"), val = tensor<fp16, [256, 768, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(7844160)))];
            tensor<fp16, [256]> var_889_bias_0_to_fp16 = const()[name = tensor<string, []>("op_889_bias_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(8237440)))];
            tensor<fp16, [1, 256, 16, 16]> var_889_cast_fp16 = conv(bias = var_889_bias_0_to_fp16, dilations = input_287_dilations_0, groups = input_287_groups_0, pad = input_287_pad_0, pad_type = input_287_pad_type_0, strides = input_287_strides_0, weight = var_889_weight_0_to_fp16, x = input_283_cast_fp16)[name = tensor<string, []>("op_889_cast_fp16")];
            tensor<fp16, [1, 256, 16, 16]> input_289_cast_fp16 = add(x = input_275_cast_fp16, y = var_889_cast_fp16)[name = tensor<string, []>("input_289_cast_fp16")];
            tensor<string, []> input_291_pad_type_0 = const()[name = tensor<string, []>("input_291_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_291_pad_0 = const()[name = tensor<string, []>("input_291_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, []> input_291_groups_0 = const()[name = tensor<string, []>("input_291_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_291_strides_0 = const()[name = tensor<string, []>("input_291_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_291_dilations_0 = const()[name = tensor<string, []>("input_291_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 3, 3]> image_encoder_model_network_4_8_token_mixer_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_8_token_mixer_reparam_conv_weight_to_fp16"), val = tensor<fp16, [256, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(8238016)))];
            tensor<fp16, [256]> image_encoder_model_network_4_8_token_mixer_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_8_token_mixer_reparam_conv_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(8242688)))];
            tensor<fp16, [1, 256, 16, 16]> input_291_cast_fp16 = conv(bias = image_encoder_model_network_4_8_token_mixer_reparam_conv_bias_to_fp16, dilations = input_291_dilations_0, groups = input_291_groups_0, pad = input_291_pad_0, pad_type = input_291_pad_type_0, strides = input_291_strides_0, weight = image_encoder_model_network_4_8_token_mixer_reparam_conv_weight_to_fp16, x = input_289_cast_fp16)[name = tensor<string, []>("input_291_cast_fp16")];
            tensor<string, []> input_293_pad_type_0 = const()[name = tensor<string, []>("input_293_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_293_pad_0 = const()[name = tensor<string, []>("input_293_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_293_groups_0 = const()[name = tensor<string, []>("input_293_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_293_strides_0 = const()[name = tensor<string, []>("input_293_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_293_dilations_0 = const()[name = tensor<string, []>("input_293_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 7, 7]> const_43_to_fp16 = const()[name = tensor<string, []>("const_43_to_fp16"), val = tensor<fp16, [256, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(8243264)))];
            tensor<fp16, [256]> const_44_to_fp16 = const()[name = tensor<string, []>("const_44_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(8268416)))];
            tensor<fp16, [1, 256, 16, 16]> input_295_cast_fp16 = conv(bias = const_44_to_fp16, dilations = input_293_dilations_0, groups = input_293_groups_0, pad = input_293_pad_0, pad_type = input_293_pad_type_0, strides = input_293_strides_0, weight = const_43_to_fp16, x = input_291_cast_fp16)[name = tensor<string, []>("input_295_cast_fp16")];
            tensor<string, []> input_297_pad_type_0 = const()[name = tensor<string, []>("input_297_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_297_strides_0 = const()[name = tensor<string, []>("input_297_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_297_pad_0 = const()[name = tensor<string, []>("input_297_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_297_dilations_0 = const()[name = tensor<string, []>("input_297_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_297_groups_0 = const()[name = tensor<string, []>("input_297_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [768, 256, 1, 1]> image_encoder_model_network_4_8_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_8_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [768, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(8268992)))];
            tensor<fp16, [768]> image_encoder_model_network_4_8_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_8_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [768]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(8662272)))];
            tensor<fp16, [1, 768, 16, 16]> input_297_cast_fp16 = conv(bias = image_encoder_model_network_4_8_convffn_fc1_bias_to_fp16, dilations = input_297_dilations_0, groups = input_297_groups_0, pad = input_297_pad_0, pad_type = input_297_pad_type_0, strides = input_297_strides_0, weight = image_encoder_model_network_4_8_convffn_fc1_weight_to_fp16, x = input_295_cast_fp16)[name = tensor<string, []>("input_297_cast_fp16")];
            tensor<string, []> input_299_mode_0 = const()[name = tensor<string, []>("input_299_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 768, 16, 16]> input_299_cast_fp16 = gelu(mode = input_299_mode_0, x = input_297_cast_fp16)[name = tensor<string, []>("input_299_cast_fp16")];
            tensor<string, []> input_303_pad_type_0 = const()[name = tensor<string, []>("input_303_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_303_strides_0 = const()[name = tensor<string, []>("input_303_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_303_pad_0 = const()[name = tensor<string, []>("input_303_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_303_dilations_0 = const()[name = tensor<string, []>("input_303_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_303_groups_0 = const()[name = tensor<string, []>("input_303_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [256, 768, 1, 1]> var_935_weight_0_to_fp16 = const()[name = tensor<string, []>("op_935_weight_0_to_fp16"), val = tensor<fp16, [256, 768, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(8663872)))];
            tensor<fp16, [256]> var_935_bias_0_to_fp16 = const()[name = tensor<string, []>("op_935_bias_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9057152)))];
            tensor<fp16, [1, 256, 16, 16]> var_935_cast_fp16 = conv(bias = var_935_bias_0_to_fp16, dilations = input_303_dilations_0, groups = input_303_groups_0, pad = input_303_pad_0, pad_type = input_303_pad_type_0, strides = input_303_strides_0, weight = var_935_weight_0_to_fp16, x = input_299_cast_fp16)[name = tensor<string, []>("op_935_cast_fp16")];
            tensor<fp16, [1, 256, 16, 16]> input_305_cast_fp16 = add(x = input_291_cast_fp16, y = var_935_cast_fp16)[name = tensor<string, []>("input_305_cast_fp16")];
            tensor<string, []> input_307_pad_type_0 = const()[name = tensor<string, []>("input_307_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_307_pad_0 = const()[name = tensor<string, []>("input_307_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, []> input_307_groups_0 = const()[name = tensor<string, []>("input_307_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_307_strides_0 = const()[name = tensor<string, []>("input_307_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_307_dilations_0 = const()[name = tensor<string, []>("input_307_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 3, 3]> image_encoder_model_network_4_9_token_mixer_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_9_token_mixer_reparam_conv_weight_to_fp16"), val = tensor<fp16, [256, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9057728)))];
            tensor<fp16, [256]> image_encoder_model_network_4_9_token_mixer_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_9_token_mixer_reparam_conv_bias_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9062400)))];
            tensor<fp16, [1, 256, 16, 16]> input_307_cast_fp16 = conv(bias = image_encoder_model_network_4_9_token_mixer_reparam_conv_bias_to_fp16, dilations = input_307_dilations_0, groups = input_307_groups_0, pad = input_307_pad_0, pad_type = input_307_pad_type_0, strides = input_307_strides_0, weight = image_encoder_model_network_4_9_token_mixer_reparam_conv_weight_to_fp16, x = input_305_cast_fp16)[name = tensor<string, []>("input_307_cast_fp16")];
            tensor<string, []> input_309_pad_type_0 = const()[name = tensor<string, []>("input_309_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_309_pad_0 = const()[name = tensor<string, []>("input_309_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_309_groups_0 = const()[name = tensor<string, []>("input_309_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> input_309_strides_0 = const()[name = tensor<string, []>("input_309_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_309_dilations_0 = const()[name = tensor<string, []>("input_309_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [256, 1, 7, 7]> const_45_to_fp16 = const()[name = tensor<string, []>("const_45_to_fp16"), val = tensor<fp16, [256, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9062976)))];
            tensor<fp16, [256]> const_46_to_fp16 = const()[name = tensor<string, []>("const_46_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9088128)))];
            tensor<fp16, [1, 256, 16, 16]> input_311_cast_fp16 = conv(bias = const_46_to_fp16, dilations = input_309_dilations_0, groups = input_309_groups_0, pad = input_309_pad_0, pad_type = input_309_pad_type_0, strides = input_309_strides_0, weight = const_45_to_fp16, x = input_307_cast_fp16)[name = tensor<string, []>("input_311_cast_fp16")];
            tensor<string, []> input_313_pad_type_0 = const()[name = tensor<string, []>("input_313_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_313_strides_0 = const()[name = tensor<string, []>("input_313_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_313_pad_0 = const()[name = tensor<string, []>("input_313_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_313_dilations_0 = const()[name = tensor<string, []>("input_313_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_313_groups_0 = const()[name = tensor<string, []>("input_313_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [768, 256, 1, 1]> image_encoder_model_network_4_9_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_9_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [768, 256, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9088704)))];
            tensor<fp16, [768]> image_encoder_model_network_4_9_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_4_9_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [768]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9481984)))];
            tensor<fp16, [1, 768, 16, 16]> input_313_cast_fp16 = conv(bias = image_encoder_model_network_4_9_convffn_fc1_bias_to_fp16, dilations = input_313_dilations_0, groups = input_313_groups_0, pad = input_313_pad_0, pad_type = input_313_pad_type_0, strides = input_313_strides_0, weight = image_encoder_model_network_4_9_convffn_fc1_weight_to_fp16, x = input_311_cast_fp16)[name = tensor<string, []>("input_313_cast_fp16")];
            tensor<string, []> input_315_mode_0 = const()[name = tensor<string, []>("input_315_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 768, 16, 16]> input_315_cast_fp16 = gelu(mode = input_315_mode_0, x = input_313_cast_fp16)[name = tensor<string, []>("input_315_cast_fp16")];
            tensor<string, []> input_319_pad_type_0 = const()[name = tensor<string, []>("input_319_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_319_strides_0 = const()[name = tensor<string, []>("input_319_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_319_pad_0 = const()[name = tensor<string, []>("input_319_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_319_dilations_0 = const()[name = tensor<string, []>("input_319_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_319_groups_0 = const()[name = tensor<string, []>("input_319_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [256, 768, 1, 1]> var_981_weight_0_to_fp16 = const()[name = tensor<string, []>("op_981_weight_0_to_fp16"), val = tensor<fp16, [256, 768, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9483584)))];
            tensor<fp16, [256]> var_981_bias_0_to_fp16 = const()[name = tensor<string, []>("op_981_bias_0_to_fp16"), val = tensor<fp16, [256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9876864)))];
            tensor<fp16, [1, 256, 16, 16]> var_981_cast_fp16 = conv(bias = var_981_bias_0_to_fp16, dilations = input_319_dilations_0, groups = input_319_groups_0, pad = input_319_pad_0, pad_type = input_319_pad_type_0, strides = input_319_strides_0, weight = var_981_weight_0_to_fp16, x = input_315_cast_fp16)[name = tensor<string, []>("op_981_cast_fp16")];
            tensor<fp16, [1, 256, 16, 16]> input_321_cast_fp16 = add(x = input_307_cast_fp16, y = var_981_cast_fp16)[name = tensor<string, []>("input_321_cast_fp16")];
            tensor<string, []> x_5_pad_type_0 = const()[name = tensor<string, []>("x_5_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> x_5_pad_0 = const()[name = tensor<string, []>("x_5_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, [2]> x_5_strides_0 = const()[name = tensor<string, []>("x_5_strides_0"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, []> x_5_groups_0 = const()[name = tensor<string, []>("x_5_groups_0"), val = tensor<int32, []>(256)];
            tensor<int32, [2]> x_5_dilations_0 = const()[name = tensor<string, []>("x_5_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [512, 1, 7, 7]> image_encoder_model_network_5_proj_0_lkb_reparam_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_5_proj_0_lkb_reparam_weight_to_fp16"), val = tensor<fp16, [512, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9877440)))];
            tensor<fp16, [512]> image_encoder_model_network_5_proj_0_lkb_reparam_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_5_proj_0_lkb_reparam_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9927680)))];
            tensor<fp16, [1, 512, 8, 8]> x_5_cast_fp16 = conv(bias = image_encoder_model_network_5_proj_0_lkb_reparam_bias_to_fp16, dilations = x_5_dilations_0, groups = x_5_groups_0, pad = x_5_pad_0, pad_type = x_5_pad_type_0, strides = x_5_strides_0, weight = image_encoder_model_network_5_proj_0_lkb_reparam_weight_to_fp16, x = input_321_cast_fp16)[name = tensor<string, []>("x_5_cast_fp16")];
            tensor<int32, [2]> input_323_axes_0 = const()[name = tensor<string, []>("input_323_axes_0"), val = tensor<int32, [2]>([2, 3])];
            tensor<fp16, [1, 512, 1, 1]> input_323_cast_fp16 = reduce_mean(axes = input_323_axes_0, keep_dims = var_4, x = x_5_cast_fp16)[name = tensor<string, []>("input_323_cast_fp16")];
            tensor<string, []> input_325_pad_type_0 = const()[name = tensor<string, []>("input_325_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_325_strides_0 = const()[name = tensor<string, []>("input_325_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_325_pad_0 = const()[name = tensor<string, []>("input_325_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_325_dilations_0 = const()[name = tensor<string, []>("input_325_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_325_groups_0 = const()[name = tensor<string, []>("input_325_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [128, 512, 1, 1]> image_encoder_model_network_5_proj_0_se_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_5_proj_0_se_fc1_weight_to_fp16"), val = tensor<fp16, [128, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9928768)))];
            tensor<fp16, [128]> image_encoder_model_network_5_proj_0_se_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_5_proj_0_se_fc1_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10059904)))];
            tensor<fp16, [1, 128, 1, 1]> input_325_cast_fp16 = conv(bias = image_encoder_model_network_5_proj_0_se_fc1_bias_to_fp16, dilations = input_325_dilations_0, groups = input_325_groups_0, pad = input_325_pad_0, pad_type = input_325_pad_type_0, strides = input_325_strides_0, weight = image_encoder_model_network_5_proj_0_se_fc1_weight_to_fp16, x = input_323_cast_fp16)[name = tensor<string, []>("input_325_cast_fp16")];
            tensor<fp16, [1, 128, 1, 1]> input_327_cast_fp16 = relu(x = input_325_cast_fp16)[name = tensor<string, []>("input_327_cast_fp16")];
            tensor<string, []> x_7_pad_type_0 = const()[name = tensor<string, []>("x_7_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> x_7_strides_0 = const()[name = tensor<string, []>("x_7_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> x_7_pad_0 = const()[name = tensor<string, []>("x_7_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> x_7_dilations_0 = const()[name = tensor<string, []>("x_7_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> x_7_groups_0 = const()[name = tensor<string, []>("x_7_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 128, 1, 1]> image_encoder_model_network_5_proj_0_se_fc2_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_5_proj_0_se_fc2_weight_to_fp16"), val = tensor<fp16, [512, 128, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10060224)))];
            tensor<fp16, [512]> image_encoder_model_network_5_proj_0_se_fc2_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_5_proj_0_se_fc2_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10191360)))];
            tensor<fp16, [1, 512, 1, 1]> x_7_cast_fp16 = conv(bias = image_encoder_model_network_5_proj_0_se_fc2_bias_to_fp16, dilations = x_7_dilations_0, groups = x_7_groups_0, pad = x_7_pad_0, pad_type = x_7_pad_type_0, strides = x_7_strides_0, weight = image_encoder_model_network_5_proj_0_se_fc2_weight_to_fp16, x = input_327_cast_fp16)[name = tensor<string, []>("x_7_cast_fp16")];
            tensor<fp16, [1, 512, 1, 1]> var_1014_cast_fp16 = sigmoid(x = x_7_cast_fp16)[name = tensor<string, []>("op_1014_cast_fp16")];
            tensor<fp16, [1, 512, 8, 8]> input_329_cast_fp16 = mul(x = x_5_cast_fp16, y = var_1014_cast_fp16)[name = tensor<string, []>("input_329_cast_fp16")];
            tensor<string, []> input_331_mode_0 = const()[name = tensor<string, []>("input_331_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 512, 8, 8]> input_331_cast_fp16 = gelu(mode = input_331_mode_0, x = input_329_cast_fp16)[name = tensor<string, []>("input_331_cast_fp16")];
            tensor<string, []> input_333_pad_type_0 = const()[name = tensor<string, []>("input_333_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_333_strides_0 = const()[name = tensor<string, []>("input_333_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_333_pad_0 = const()[name = tensor<string, []>("input_333_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_333_dilations_0 = const()[name = tensor<string, []>("input_333_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_333_groups_0 = const()[name = tensor<string, []>("input_333_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> image_encoder_model_network_5_proj_1_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_5_proj_1_reparam_conv_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10192448)))];
            tensor<fp16, [512]> image_encoder_model_network_5_proj_1_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_5_proj_1_reparam_conv_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10716800)))];
            tensor<fp16, [1, 512, 8, 8]> input_333_cast_fp16 = conv(bias = image_encoder_model_network_5_proj_1_reparam_conv_bias_to_fp16, dilations = input_333_dilations_0, groups = input_333_groups_0, pad = input_333_pad_0, pad_type = input_333_pad_type_0, strides = input_333_strides_0, weight = image_encoder_model_network_5_proj_1_reparam_conv_weight_to_fp16, x = input_331_cast_fp16)[name = tensor<string, []>("input_333_cast_fp16")];
            tensor<string, []> input_335_mode_0 = const()[name = tensor<string, []>("input_335_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 512, 8, 8]> input_335_cast_fp16 = gelu(mode = input_335_mode_0, x = input_333_cast_fp16)[name = tensor<string, []>("input_335_cast_fp16")];
            tensor<string, []> input_337_pad_type_0 = const()[name = tensor<string, []>("input_337_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_337_pad_0 = const()[name = tensor<string, []>("input_337_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_337_groups_0 = const()[name = tensor<string, []>("input_337_groups_0"), val = tensor<int32, []>(512)];
            tensor<int32, [2]> input_337_strides_0 = const()[name = tensor<string, []>("input_337_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_337_dilations_0 = const()[name = tensor<string, []>("input_337_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [512, 1, 7, 7]> image_encoder_model_network_6_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_6_reparam_conv_weight_to_fp16"), val = tensor<fp16, [512, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10717888)))];
            tensor<fp16, [512]> image_encoder_model_network_6_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_6_reparam_conv_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10768128)))];
            tensor<fp16, [1, 512, 8, 8]> input_337_cast_fp16 = conv(bias = image_encoder_model_network_6_reparam_conv_bias_to_fp16, dilations = input_337_dilations_0, groups = input_337_groups_0, pad = input_337_pad_0, pad_type = input_337_pad_type_0, strides = input_337_strides_0, weight = image_encoder_model_network_6_reparam_conv_weight_to_fp16, x = input_335_cast_fp16)[name = tensor<string, []>("input_337_cast_fp16")];
            tensor<fp16, [512]> image_encoder_model_network_7_0_norm_running_mean_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_0_norm_running_mean_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10769216)))];
            tensor<fp16, [512]> image_encoder_model_network_7_0_norm_running_var_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_0_norm_running_var_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10770304)))];
            tensor<fp16, [512]> image_encoder_model_network_7_0_norm_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_0_norm_weight_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10771392)))];
            tensor<fp16, [512]> image_encoder_model_network_7_0_norm_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_0_norm_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10772480)))];
            tensor<fp16, []> var_13_to_fp16 = const()[name = tensor<string, []>("op_13_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 512, 8, 8]> x_9_cast_fp16 = batch_norm(beta = image_encoder_model_network_7_0_norm_bias_to_fp16, epsilon = var_13_to_fp16, gamma = image_encoder_model_network_7_0_norm_weight_to_fp16, mean = image_encoder_model_network_7_0_norm_running_mean_to_fp16, variance = image_encoder_model_network_7_0_norm_running_var_to_fp16, x = input_337_cast_fp16)[name = tensor<string, []>("x_9_cast_fp16")];
            tensor<int32, [3]> concat_0 = const()[name = tensor<string, []>("concat_0"), val = tensor<int32, [3]>([1, 512, 64])];
            tensor<fp16, [1, 512, 64]> var_1057_cast_fp16 = reshape(shape = concat_0, x = x_9_cast_fp16)[name = tensor<string, []>("op_1057_cast_fp16")];
            tensor<int32, [3]> input_339_perm_0 = const()[name = tensor<string, []>("input_339_perm_0"), val = tensor<int32, [3]>([0, -1, -2])];
            tensor<fp16, [1536, 512]> image_encoder_model_network_7_0_token_mixer_qkv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_0_token_mixer_qkv_weight_to_fp16"), val = tensor<fp16, [1536, 512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10773568)))];
            tensor<fp16, [1536]> linear_0_bias_0_to_fp16 = const()[name = tensor<string, []>("linear_0_bias_0_to_fp16"), val = tensor<fp16, [1536]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(12346496)))];
            tensor<fp16, [1, 64, 512]> input_339_cast_fp16 = transpose(perm = input_339_perm_0, x = var_1057_cast_fp16)[name = tensor<string, []>("transpose_8")];
            tensor<fp16, [1, 64, 1536]> linear_0_cast_fp16 = linear(bias = linear_0_bias_0_to_fp16, weight = image_encoder_model_network_7_0_token_mixer_qkv_weight_to_fp16, x = input_339_cast_fp16)[name = tensor<string, []>("linear_0_cast_fp16")];
            tensor<int32, [5]> var_1061 = const()[name = tensor<string, []>("op_1061"), val = tensor<int32, [5]>([1, 64, 3, 16, 32])];
            tensor<fp16, [1, 64, 3, 16, 32]> var_1062_cast_fp16 = reshape(shape = var_1061, x = linear_0_cast_fp16)[name = tensor<string, []>("op_1062_cast_fp16")];
            tensor<int32, [5]> var_1063 = const()[name = tensor<string, []>("op_1063"), val = tensor<int32, [5]>([2, 0, 3, 1, 4])];
            tensor<int32, [3]> var_1065_split_sizes_0 = const()[name = tensor<string, []>("op_1065_split_sizes_0"), val = tensor<int32, [3]>([1, 1, 1])];
            tensor<int32, []> var_1065_axis_0 = const()[name = tensor<string, []>("op_1065_axis_0"), val = tensor<int32, []>(0)];
            tensor<fp16, [3, 1, 16, 64, 32]> qkv_1_cast_fp16 = transpose(perm = var_1063, x = var_1062_cast_fp16)[name = tensor<string, []>("transpose_7")];
            tensor<fp16, [1, 1, 16, 64, 32]> var_1065_cast_fp16_0, tensor<fp16, [1, 1, 16, 64, 32]> var_1065_cast_fp16_1, tensor<fp16, [1, 1, 16, 64, 32]> var_1065_cast_fp16_2 = split(axis = var_1065_axis_0, split_sizes = var_1065_split_sizes_0, x = qkv_1_cast_fp16)[name = tensor<string, []>("op_1065_cast_fp16")];
            tensor<int32, [1]> squeeze_0_axes_0 = const()[name = tensor<string, []>("squeeze_0_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 16, 64, 32]> squeeze_0_cast_fp16 = squeeze(axes = squeeze_0_axes_0, x = var_1065_cast_fp16_0)[name = tensor<string, []>("squeeze_0_cast_fp16")];
            tensor<int32, [1]> squeeze_1_axes_0 = const()[name = tensor<string, []>("squeeze_1_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 16, 64, 32]> squeeze_1_cast_fp16 = squeeze(axes = squeeze_1_axes_0, x = var_1065_cast_fp16_1)[name = tensor<string, []>("squeeze_1_cast_fp16")];
            tensor<int32, [1]> squeeze_2_axes_0 = const()[name = tensor<string, []>("squeeze_2_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 16, 64, 32]> squeeze_2_cast_fp16 = squeeze(axes = squeeze_2_axes_0, x = var_1065_cast_fp16_2)[name = tensor<string, []>("squeeze_2_cast_fp16")];
            tensor<fp16, []> var_1069_to_fp16 = const()[name = tensor<string, []>("op_1069_to_fp16"), val = tensor<fp16, []>(0x1.6ap-3)];
            tensor<fp16, [1, 16, 64, 32]> var_1070_cast_fp16 = mul(x = squeeze_0_cast_fp16, y = var_1069_to_fp16)[name = tensor<string, []>("op_1070_cast_fp16")];
            tensor<bool, []> attn_1_transpose_x_1 = const()[name = tensor<string, []>("attn_1_transpose_x_1"), val = tensor<bool, []>(false)];
            tensor<bool, []> attn_1_transpose_y_1 = const()[name = tensor<string, []>("attn_1_transpose_y_1"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 16, 64, 64]> attn_1_cast_fp16 = matmul(transpose_x = attn_1_transpose_x_1, transpose_y = attn_1_transpose_y_1, x = var_1070_cast_fp16, y = squeeze_1_cast_fp16)[name = tensor<string, []>("attn_1_cast_fp16")];
            tensor<fp16, [1, 16, 64, 64]> input_341_cast_fp16 = softmax(axis = var_22, x = attn_1_cast_fp16)[name = tensor<string, []>("input_341_cast_fp16")];
            tensor<bool, []> var_1075_transpose_x_0 = const()[name = tensor<string, []>("op_1075_transpose_x_0"), val = tensor<bool, []>(false)];
            tensor<bool, []> var_1075_transpose_y_0 = const()[name = tensor<string, []>("op_1075_transpose_y_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 16, 64, 32]> var_1075_cast_fp16 = matmul(transpose_x = var_1075_transpose_x_0, transpose_y = var_1075_transpose_y_0, x = input_341_cast_fp16, y = squeeze_2_cast_fp16)[name = tensor<string, []>("op_1075_cast_fp16")];
            tensor<int32, [4]> var_1076_perm_0 = const()[name = tensor<string, []>("op_1076_perm_0"), val = tensor<int32, [4]>([0, 2, 1, 3])];
            tensor<int32, [3]> var_1077 = const()[name = tensor<string, []>("op_1077"), val = tensor<int32, [3]>([1, 64, 512])];
            tensor<fp16, [1, 64, 16, 32]> var_1076_cast_fp16 = transpose(perm = var_1076_perm_0, x = var_1075_cast_fp16)[name = tensor<string, []>("transpose_6")];
            tensor<fp16, [1, 64, 512]> input_343_cast_fp16 = reshape(shape = var_1077, x = var_1076_cast_fp16)[name = tensor<string, []>("input_343_cast_fp16")];
            tensor<fp16, [512, 512]> image_encoder_model_network_7_0_token_mixer_proj_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_0_token_mixer_proj_weight_to_fp16"), val = tensor<fp16, [512, 512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(12349632)))];
            tensor<fp16, [512]> image_encoder_model_network_7_0_token_mixer_proj_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_0_token_mixer_proj_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(12873984)))];
            tensor<fp16, [1, 64, 512]> linear_1_cast_fp16 = linear(bias = image_encoder_model_network_7_0_token_mixer_proj_bias_to_fp16, weight = image_encoder_model_network_7_0_token_mixer_proj_weight_to_fp16, x = input_343_cast_fp16)[name = tensor<string, []>("linear_1_cast_fp16")];
            tensor<int32, [3]> var_1083_perm_0 = const()[name = tensor<string, []>("op_1083_perm_0"), val = tensor<int32, [3]>([0, -1, -2])];
            tensor<int32, [4]> var_1084 = const()[name = tensor<string, []>("op_1084"), val = tensor<int32, [4]>([1, 512, 8, 8])];
            tensor<fp16, [1, 512, 64]> var_1083_cast_fp16 = transpose(perm = var_1083_perm_0, x = linear_1_cast_fp16)[name = tensor<string, []>("transpose_5")];
            tensor<fp16, [1, 512, 8, 8]> var_1085_cast_fp16 = reshape(shape = var_1084, x = var_1083_cast_fp16)[name = tensor<string, []>("op_1085_cast_fp16")];
            tensor<fp16, [512, 1, 1]> image_encoder_model_network_7_0_layer_scale_1_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_0_layer_scale_1_to_fp16"), val = tensor<fp16, [512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(12875072)))];
            tensor<fp16, [1, 512, 8, 8]> var_1086_cast_fp16 = mul(x = image_encoder_model_network_7_0_layer_scale_1_to_fp16, y = var_1085_cast_fp16)[name = tensor<string, []>("op_1086_cast_fp16")];
            tensor<fp16, [1, 512, 8, 8]> input_347_cast_fp16 = add(x = input_337_cast_fp16, y = var_1086_cast_fp16)[name = tensor<string, []>("input_347_cast_fp16")];
            tensor<string, []> input_349_pad_type_0 = const()[name = tensor<string, []>("input_349_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_349_pad_0 = const()[name = tensor<string, []>("input_349_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_349_groups_0 = const()[name = tensor<string, []>("input_349_groups_0"), val = tensor<int32, []>(512)];
            tensor<int32, [2]> input_349_strides_0 = const()[name = tensor<string, []>("input_349_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_349_dilations_0 = const()[name = tensor<string, []>("input_349_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [512, 1, 7, 7]> const_47_to_fp16 = const()[name = tensor<string, []>("const_47_to_fp16"), val = tensor<fp16, [512, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(12876160)))];
            tensor<fp16, [512]> const_48_to_fp16 = const()[name = tensor<string, []>("const_48_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(12926400)))];
            tensor<fp16, [1, 512, 8, 8]> input_351_cast_fp16 = conv(bias = const_48_to_fp16, dilations = input_349_dilations_0, groups = input_349_groups_0, pad = input_349_pad_0, pad_type = input_349_pad_type_0, strides = input_349_strides_0, weight = const_47_to_fp16, x = input_347_cast_fp16)[name = tensor<string, []>("input_351_cast_fp16")];
            tensor<string, []> input_353_pad_type_0 = const()[name = tensor<string, []>("input_353_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_353_strides_0 = const()[name = tensor<string, []>("input_353_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_353_pad_0 = const()[name = tensor<string, []>("input_353_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_353_dilations_0 = const()[name = tensor<string, []>("input_353_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_353_groups_0 = const()[name = tensor<string, []>("input_353_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1536, 512, 1, 1]> image_encoder_model_network_7_0_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_0_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [1536, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(12927488)))];
            tensor<fp16, [1536]> image_encoder_model_network_7_0_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_0_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [1536]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(14500416)))];
            tensor<fp16, [1, 1536, 8, 8]> input_353_cast_fp16 = conv(bias = image_encoder_model_network_7_0_convffn_fc1_bias_to_fp16, dilations = input_353_dilations_0, groups = input_353_groups_0, pad = input_353_pad_0, pad_type = input_353_pad_type_0, strides = input_353_strides_0, weight = image_encoder_model_network_7_0_convffn_fc1_weight_to_fp16, x = input_351_cast_fp16)[name = tensor<string, []>("input_353_cast_fp16")];
            tensor<string, []> input_355_mode_0 = const()[name = tensor<string, []>("input_355_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 1536, 8, 8]> input_355_cast_fp16 = gelu(mode = input_355_mode_0, x = input_353_cast_fp16)[name = tensor<string, []>("input_355_cast_fp16")];
            tensor<string, []> input_359_pad_type_0 = const()[name = tensor<string, []>("input_359_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_359_strides_0 = const()[name = tensor<string, []>("input_359_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_359_pad_0 = const()[name = tensor<string, []>("input_359_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_359_dilations_0 = const()[name = tensor<string, []>("input_359_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_359_groups_0 = const()[name = tensor<string, []>("input_359_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 1536, 1, 1]> var_1121_weight_0_to_fp16 = const()[name = tensor<string, []>("op_1121_weight_0_to_fp16"), val = tensor<fp16, [512, 1536, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(14503552)))];
            tensor<fp16, [512]> var_1121_bias_0_to_fp16 = const()[name = tensor<string, []>("op_1121_bias_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(16076480)))];
            tensor<fp16, [1, 512, 8, 8]> var_1121_cast_fp16 = conv(bias = var_1121_bias_0_to_fp16, dilations = input_359_dilations_0, groups = input_359_groups_0, pad = input_359_pad_0, pad_type = input_359_pad_type_0, strides = input_359_strides_0, weight = var_1121_weight_0_to_fp16, x = input_355_cast_fp16)[name = tensor<string, []>("op_1121_cast_fp16")];
            tensor<fp16, [1, 512, 8, 8]> input_361_cast_fp16 = add(x = input_347_cast_fp16, y = var_1121_cast_fp16)[name = tensor<string, []>("input_361_cast_fp16")];
            tensor<fp16, [512]> image_encoder_model_network_7_1_norm_running_mean_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_1_norm_running_mean_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(16077568)))];
            tensor<fp16, [512]> image_encoder_model_network_7_1_norm_running_var_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_1_norm_running_var_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(16078656)))];
            tensor<fp16, [512]> image_encoder_model_network_7_1_norm_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_1_norm_weight_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(16079744)))];
            tensor<fp16, [512]> image_encoder_model_network_7_1_norm_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_1_norm_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(16080832)))];
            tensor<fp16, [1, 512, 8, 8]> x_13_cast_fp16 = batch_norm(beta = image_encoder_model_network_7_1_norm_bias_to_fp16, epsilon = var_13_to_fp16, gamma = image_encoder_model_network_7_1_norm_weight_to_fp16, mean = image_encoder_model_network_7_1_norm_running_mean_to_fp16, variance = image_encoder_model_network_7_1_norm_running_var_to_fp16, x = input_361_cast_fp16)[name = tensor<string, []>("x_13_cast_fp16")];
            tensor<int32, [3]> concat_1 = const()[name = tensor<string, []>("concat_1"), val = tensor<int32, [3]>([1, 512, 64])];
            tensor<fp16, [1, 512, 64]> var_1144_cast_fp16 = reshape(shape = concat_1, x = x_13_cast_fp16)[name = tensor<string, []>("op_1144_cast_fp16")];
            tensor<int32, [3]> input_363_perm_0 = const()[name = tensor<string, []>("input_363_perm_0"), val = tensor<int32, [3]>([0, -1, -2])];
            tensor<fp16, [1536, 512]> image_encoder_model_network_7_1_token_mixer_qkv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_1_token_mixer_qkv_weight_to_fp16"), val = tensor<fp16, [1536, 512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(16081920)))];
            tensor<fp16, [1, 64, 512]> input_363_cast_fp16 = transpose(perm = input_363_perm_0, x = var_1144_cast_fp16)[name = tensor<string, []>("transpose_4")];
            tensor<fp16, [1, 64, 1536]> linear_2_cast_fp16 = linear(bias = linear_0_bias_0_to_fp16, weight = image_encoder_model_network_7_1_token_mixer_qkv_weight_to_fp16, x = input_363_cast_fp16)[name = tensor<string, []>("linear_2_cast_fp16")];
            tensor<int32, [5]> var_1148 = const()[name = tensor<string, []>("op_1148"), val = tensor<int32, [5]>([1, 64, 3, 16, 32])];
            tensor<fp16, [1, 64, 3, 16, 32]> var_1149_cast_fp16 = reshape(shape = var_1148, x = linear_2_cast_fp16)[name = tensor<string, []>("op_1149_cast_fp16")];
            tensor<int32, [5]> var_1150 = const()[name = tensor<string, []>("op_1150"), val = tensor<int32, [5]>([2, 0, 3, 1, 4])];
            tensor<int32, [3]> var_1152_split_sizes_0 = const()[name = tensor<string, []>("op_1152_split_sizes_0"), val = tensor<int32, [3]>([1, 1, 1])];
            tensor<int32, []> var_1152_axis_0 = const()[name = tensor<string, []>("op_1152_axis_0"), val = tensor<int32, []>(0)];
            tensor<fp16, [3, 1, 16, 64, 32]> qkv_3_cast_fp16 = transpose(perm = var_1150, x = var_1149_cast_fp16)[name = tensor<string, []>("transpose_3")];
            tensor<fp16, [1, 1, 16, 64, 32]> var_1152_cast_fp16_0, tensor<fp16, [1, 1, 16, 64, 32]> var_1152_cast_fp16_1, tensor<fp16, [1, 1, 16, 64, 32]> var_1152_cast_fp16_2 = split(axis = var_1152_axis_0, split_sizes = var_1152_split_sizes_0, x = qkv_3_cast_fp16)[name = tensor<string, []>("op_1152_cast_fp16")];
            tensor<int32, [1]> squeeze_3_axes_0 = const()[name = tensor<string, []>("squeeze_3_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 16, 64, 32]> squeeze_3_cast_fp16 = squeeze(axes = squeeze_3_axes_0, x = var_1152_cast_fp16_0)[name = tensor<string, []>("squeeze_3_cast_fp16")];
            tensor<int32, [1]> squeeze_4_axes_0 = const()[name = tensor<string, []>("squeeze_4_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 16, 64, 32]> squeeze_4_cast_fp16 = squeeze(axes = squeeze_4_axes_0, x = var_1152_cast_fp16_1)[name = tensor<string, []>("squeeze_4_cast_fp16")];
            tensor<int32, [1]> squeeze_5_axes_0 = const()[name = tensor<string, []>("squeeze_5_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 16, 64, 32]> squeeze_5_cast_fp16 = squeeze(axes = squeeze_5_axes_0, x = var_1152_cast_fp16_2)[name = tensor<string, []>("squeeze_5_cast_fp16")];
            tensor<fp16, []> var_1156_to_fp16 = const()[name = tensor<string, []>("op_1156_to_fp16"), val = tensor<fp16, []>(0x1.6ap-3)];
            tensor<fp16, [1, 16, 64, 32]> var_1157_cast_fp16 = mul(x = squeeze_3_cast_fp16, y = var_1156_to_fp16)[name = tensor<string, []>("op_1157_cast_fp16")];
            tensor<bool, []> attn_5_transpose_x_1 = const()[name = tensor<string, []>("attn_5_transpose_x_1"), val = tensor<bool, []>(false)];
            tensor<bool, []> attn_5_transpose_y_1 = const()[name = tensor<string, []>("attn_5_transpose_y_1"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 16, 64, 64]> attn_5_cast_fp16 = matmul(transpose_x = attn_5_transpose_x_1, transpose_y = attn_5_transpose_y_1, x = var_1157_cast_fp16, y = squeeze_4_cast_fp16)[name = tensor<string, []>("attn_5_cast_fp16")];
            tensor<fp16, [1, 16, 64, 64]> input_365_cast_fp16 = softmax(axis = var_22, x = attn_5_cast_fp16)[name = tensor<string, []>("input_365_cast_fp16")];
            tensor<bool, []> var_1162_transpose_x_0 = const()[name = tensor<string, []>("op_1162_transpose_x_0"), val = tensor<bool, []>(false)];
            tensor<bool, []> var_1162_transpose_y_0 = const()[name = tensor<string, []>("op_1162_transpose_y_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 16, 64, 32]> var_1162_cast_fp16 = matmul(transpose_x = var_1162_transpose_x_0, transpose_y = var_1162_transpose_y_0, x = input_365_cast_fp16, y = squeeze_5_cast_fp16)[name = tensor<string, []>("op_1162_cast_fp16")];
            tensor<int32, [4]> var_1163_perm_0 = const()[name = tensor<string, []>("op_1163_perm_0"), val = tensor<int32, [4]>([0, 2, 1, 3])];
            tensor<int32, [3]> var_1164 = const()[name = tensor<string, []>("op_1164"), val = tensor<int32, [3]>([1, 64, 512])];
            tensor<fp16, [1, 64, 16, 32]> var_1163_cast_fp16 = transpose(perm = var_1163_perm_0, x = var_1162_cast_fp16)[name = tensor<string, []>("transpose_2")];
            tensor<fp16, [1, 64, 512]> input_367_cast_fp16 = reshape(shape = var_1164, x = var_1163_cast_fp16)[name = tensor<string, []>("input_367_cast_fp16")];
            tensor<fp16, [512, 512]> image_encoder_model_network_7_1_token_mixer_proj_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_1_token_mixer_proj_weight_to_fp16"), val = tensor<fp16, [512, 512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(17654848)))];
            tensor<fp16, [512]> image_encoder_model_network_7_1_token_mixer_proj_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_1_token_mixer_proj_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(18179200)))];
            tensor<fp16, [1, 64, 512]> linear_3_cast_fp16 = linear(bias = image_encoder_model_network_7_1_token_mixer_proj_bias_to_fp16, weight = image_encoder_model_network_7_1_token_mixer_proj_weight_to_fp16, x = input_367_cast_fp16)[name = tensor<string, []>("linear_3_cast_fp16")];
            tensor<int32, [3]> var_1170_perm_0 = const()[name = tensor<string, []>("op_1170_perm_0"), val = tensor<int32, [3]>([0, -1, -2])];
            tensor<int32, [4]> var_1171 = const()[name = tensor<string, []>("op_1171"), val = tensor<int32, [4]>([1, 512, 8, 8])];
            tensor<fp16, [1, 512, 64]> var_1170_cast_fp16 = transpose(perm = var_1170_perm_0, x = linear_3_cast_fp16)[name = tensor<string, []>("transpose_1")];
            tensor<fp16, [1, 512, 8, 8]> var_1172_cast_fp16 = reshape(shape = var_1171, x = var_1170_cast_fp16)[name = tensor<string, []>("op_1172_cast_fp16")];
            tensor<fp16, [512, 1, 1]> image_encoder_model_network_7_1_layer_scale_1_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_1_layer_scale_1_to_fp16"), val = tensor<fp16, [512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(18180288)))];
            tensor<fp16, [1, 512, 8, 8]> var_1173_cast_fp16 = mul(x = image_encoder_model_network_7_1_layer_scale_1_to_fp16, y = var_1172_cast_fp16)[name = tensor<string, []>("op_1173_cast_fp16")];
            tensor<fp16, [1, 512, 8, 8]> input_371_cast_fp16 = add(x = input_361_cast_fp16, y = var_1173_cast_fp16)[name = tensor<string, []>("input_371_cast_fp16")];
            tensor<string, []> input_373_pad_type_0 = const()[name = tensor<string, []>("input_373_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_373_pad_0 = const()[name = tensor<string, []>("input_373_pad_0"), val = tensor<int32, [4]>([3, 3, 3, 3])];
            tensor<int32, []> input_373_groups_0 = const()[name = tensor<string, []>("input_373_groups_0"), val = tensor<int32, []>(512)];
            tensor<int32, [2]> input_373_strides_0 = const()[name = tensor<string, []>("input_373_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> input_373_dilations_0 = const()[name = tensor<string, []>("input_373_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [512, 1, 7, 7]> const_49_to_fp16 = const()[name = tensor<string, []>("const_49_to_fp16"), val = tensor<fp16, [512, 1, 7, 7]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(18181376)))];
            tensor<fp16, [512]> const_50_to_fp16 = const()[name = tensor<string, []>("const_50_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(18231616)))];
            tensor<fp16, [1, 512, 8, 8]> input_375_cast_fp16 = conv(bias = const_50_to_fp16, dilations = input_373_dilations_0, groups = input_373_groups_0, pad = input_373_pad_0, pad_type = input_373_pad_type_0, strides = input_373_strides_0, weight = const_49_to_fp16, x = input_371_cast_fp16)[name = tensor<string, []>("input_375_cast_fp16")];
            tensor<string, []> input_377_pad_type_0 = const()[name = tensor<string, []>("input_377_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_377_strides_0 = const()[name = tensor<string, []>("input_377_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_377_pad_0 = const()[name = tensor<string, []>("input_377_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_377_dilations_0 = const()[name = tensor<string, []>("input_377_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_377_groups_0 = const()[name = tensor<string, []>("input_377_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1536, 512, 1, 1]> image_encoder_model_network_7_1_convffn_fc1_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_1_convffn_fc1_weight_to_fp16"), val = tensor<fp16, [1536, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(18232704)))];
            tensor<fp16, [1536]> image_encoder_model_network_7_1_convffn_fc1_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_network_7_1_convffn_fc1_bias_to_fp16"), val = tensor<fp16, [1536]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19805632)))];
            tensor<fp16, [1, 1536, 8, 8]> input_377_cast_fp16 = conv(bias = image_encoder_model_network_7_1_convffn_fc1_bias_to_fp16, dilations = input_377_dilations_0, groups = input_377_groups_0, pad = input_377_pad_0, pad_type = input_377_pad_type_0, strides = input_377_strides_0, weight = image_encoder_model_network_7_1_convffn_fc1_weight_to_fp16, x = input_375_cast_fp16)[name = tensor<string, []>("input_377_cast_fp16")];
            tensor<string, []> input_379_mode_0 = const()[name = tensor<string, []>("input_379_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 1536, 8, 8]> input_379_cast_fp16 = gelu(mode = input_379_mode_0, x = input_377_cast_fp16)[name = tensor<string, []>("input_379_cast_fp16")];
            tensor<string, []> input_383_pad_type_0 = const()[name = tensor<string, []>("input_383_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_383_strides_0 = const()[name = tensor<string, []>("input_383_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_383_pad_0 = const()[name = tensor<string, []>("input_383_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_383_dilations_0 = const()[name = tensor<string, []>("input_383_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_383_groups_0 = const()[name = tensor<string, []>("input_383_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 1536, 1, 1]> var_1208_weight_0_to_fp16 = const()[name = tensor<string, []>("op_1208_weight_0_to_fp16"), val = tensor<fp16, [512, 1536, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(19808768)))];
            tensor<fp16, [512]> var_1208_bias_0_to_fp16 = const()[name = tensor<string, []>("op_1208_bias_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(21381696)))];
            tensor<fp16, [1, 512, 8, 8]> var_1208_cast_fp16 = conv(bias = var_1208_bias_0_to_fp16, dilations = input_383_dilations_0, groups = input_383_groups_0, pad = input_383_pad_0, pad_type = input_383_pad_type_0, strides = input_383_strides_0, weight = var_1208_weight_0_to_fp16, x = input_379_cast_fp16)[name = tensor<string, []>("op_1208_cast_fp16")];
            tensor<fp16, [1, 512, 8, 8]> input_385_cast_fp16 = add(x = input_371_cast_fp16, y = var_1208_cast_fp16)[name = tensor<string, []>("input_385_cast_fp16")];
            tensor<string, []> inputs_pad_type_0 = const()[name = tensor<string, []>("inputs_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> inputs_pad_0 = const()[name = tensor<string, []>("inputs_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<int32, []> inputs_groups_0 = const()[name = tensor<string, []>("inputs_groups_0"), val = tensor<int32, []>(512)];
            tensor<int32, [2]> inputs_strides_0 = const()[name = tensor<string, []>("inputs_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> inputs_dilations_0 = const()[name = tensor<string, []>("inputs_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [1024, 1, 3, 3]> image_encoder_model_conv_exp_reparam_conv_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_conv_exp_reparam_conv_weight_to_fp16"), val = tensor<fp16, [1024, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(21382784)))];
            tensor<fp16, [1024]> image_encoder_model_conv_exp_reparam_conv_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_conv_exp_reparam_conv_bias_to_fp16"), val = tensor<fp16, [1024]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(21401280)))];
            tensor<fp16, [1, 1024, 8, 8]> inputs_cast_fp16 = conv(bias = image_encoder_model_conv_exp_reparam_conv_bias_to_fp16, dilations = inputs_dilations_0, groups = inputs_groups_0, pad = inputs_pad_0, pad_type = inputs_pad_type_0, strides = inputs_strides_0, weight = image_encoder_model_conv_exp_reparam_conv_weight_to_fp16, x = input_385_cast_fp16)[name = tensor<string, []>("inputs_cast_fp16")];
            tensor<int32, [2]> var_1224 = const()[name = tensor<string, []>("op_1224"), val = tensor<int32, [2]>([8, 8])];
            tensor<int32, [2]> var_1225 = const()[name = tensor<string, []>("op_1225"), val = tensor<int32, [2]>([8, 8])];
            tensor<string, []> input_387_pad_type_0 = const()[name = tensor<string, []>("input_387_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_387_pad_0 = const()[name = tensor<string, []>("input_387_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<bool, []> input_387_exclude_padding_from_average_0 = const()[name = tensor<string, []>("input_387_exclude_padding_from_average_0"), val = tensor<bool, []>(false)];
            tensor<bool, []> input_387_ceil_mode_0 = const()[name = tensor<string, []>("input_387_ceil_mode_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 1024, 1, 1]> input_387_cast_fp16 = avg_pool(ceil_mode = input_387_ceil_mode_0, exclude_padding_from_average = input_387_exclude_padding_from_average_0, kernel_sizes = var_1224, pad = input_387_pad_0, pad_type = input_387_pad_type_0, strides = var_1225, x = inputs_cast_fp16)[name = tensor<string, []>("input_387_cast_fp16")];
            tensor<string, []> input_389_pad_type_0 = const()[name = tensor<string, []>("input_389_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_389_strides_0 = const()[name = tensor<string, []>("input_389_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_389_pad_0 = const()[name = tensor<string, []>("input_389_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_389_dilations_0 = const()[name = tensor<string, []>("input_389_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_389_groups_0 = const()[name = tensor<string, []>("input_389_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [64, 1024, 1, 1]> image_encoder_model_conv_exp_se_reduce_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_conv_exp_se_reduce_weight_to_fp16"), val = tensor<fp16, [64, 1024, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(21403392)))];
            tensor<fp16, [64]> image_encoder_model_conv_exp_se_reduce_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_conv_exp_se_reduce_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(21534528)))];
            tensor<fp16, [1, 64, 1, 1]> input_389_cast_fp16 = conv(bias = image_encoder_model_conv_exp_se_reduce_bias_to_fp16, dilations = input_389_dilations_0, groups = input_389_groups_0, pad = input_389_pad_0, pad_type = input_389_pad_type_0, strides = input_389_strides_0, weight = image_encoder_model_conv_exp_se_reduce_weight_to_fp16, x = input_387_cast_fp16)[name = tensor<string, []>("input_389_cast_fp16")];
            tensor<fp16, [1, 64, 1, 1]> input_391_cast_fp16 = relu(x = input_389_cast_fp16)[name = tensor<string, []>("input_391_cast_fp16")];
            tensor<string, []> x_17_pad_type_0 = const()[name = tensor<string, []>("x_17_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> x_17_strides_0 = const()[name = tensor<string, []>("x_17_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> x_17_pad_0 = const()[name = tensor<string, []>("x_17_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> x_17_dilations_0 = const()[name = tensor<string, []>("x_17_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> x_17_groups_0 = const()[name = tensor<string, []>("x_17_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1024, 64, 1, 1]> image_encoder_model_conv_exp_se_expand_weight_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_conv_exp_se_expand_weight_to_fp16"), val = tensor<fp16, [1024, 64, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(21534720)))];
            tensor<fp16, [1024]> image_encoder_model_conv_exp_se_expand_bias_to_fp16 = const()[name = tensor<string, []>("image_encoder_model_conv_exp_se_expand_bias_to_fp16"), val = tensor<fp16, [1024]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(21665856)))];
            tensor<fp16, [1, 1024, 1, 1]> x_17_cast_fp16 = conv(bias = image_encoder_model_conv_exp_se_expand_bias_to_fp16, dilations = x_17_dilations_0, groups = x_17_groups_0, pad = x_17_pad_0, pad_type = x_17_pad_type_0, strides = x_17_strides_0, weight = image_encoder_model_conv_exp_se_expand_weight_to_fp16, x = input_391_cast_fp16)[name = tensor<string, []>("x_17_cast_fp16")];
            tensor<fp16, [1, 1024, 1, 1]> x_19_cast_fp16 = sigmoid(x = x_17_cast_fp16)[name = tensor<string, []>("x_19_cast_fp16")];
            tensor<fp16, [1, 1024, 8, 8]> input_393_cast_fp16 = mul(x = inputs_cast_fp16, y = x_19_cast_fp16)[name = tensor<string, []>("input_393_cast_fp16")];
            tensor<string, []> x_23_mode_0 = const()[name = tensor<string, []>("x_23_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 1024, 8, 8]> x_23_cast_fp16 = gelu(mode = x_23_mode_0, x = input_393_cast_fp16)[name = tensor<string, []>("x_23_cast_fp16")];
            tensor<int32, [2]> x_axes_0 = const()[name = tensor<string, []>("x_axes_0"), val = tensor<int32, [2]>([-2, -1])];
            tensor<fp16, [1, 1024]> x_cast_fp16 = reduce_mean(axes = x_axes_0, keep_dims = var_6, x = x_23_cast_fp16)[name = tensor<string, []>("x_cast_fp16")];
            tensor<fp16, [512, 1024]> transpose_0_to_fp16 = const()[name = tensor<string, []>("transpose_0_to_fp16"), val = tensor<fp16, [512, 1024]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(21667968)))];
            tensor<fp16, [512]> input_bias_0_to_fp16 = const()[name = tensor<string, []>("input_bias_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(22716608)))];
            tensor<fp16, [1, 512]> input_cast_fp16 = linear(bias = input_bias_0_to_fp16, weight = transpose_0_to_fp16, x = x_cast_fp16)[name = tensor<string, []>("input_cast_fp16")];
            tensor<int32, [1]> var_1254 = const()[name = tensor<string, []>("op_1254"), val = tensor<int32, [1]>([-1])];
            tensor<bool, []> var_1255 = const()[name = tensor<string, []>("op_1255"), val = tensor<bool, []>(true)];
            tensor<fp16, [1, 1]> var_1256_cast_fp16 = reduce_l2_norm(axes = var_1254, keep_dims = var_1255, x = input_cast_fp16)[name = tensor<string, []>("op_1256_cast_fp16")];
            tensor<fp16, []> var_1257_to_fp16 = const()[name = tensor<string, []>("op_1257_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1]> var_1258_cast_fp16 = maximum(x = var_1256_cast_fp16, y = var_1257_to_fp16)[name = tensor<string, []>("op_1258_cast_fp16")];
            tensor<int32, [2]> denom_reps_0 = const()[name = tensor<string, []>("denom_reps_0"), val = tensor<int32, [2]>([1, 512])];
            tensor<fp16, [1, 512]> denom_cast_fp16 = tile(reps = denom_reps_0, x = var_1258_cast_fp16)[name = tensor<string, []>("denom_cast_fp16")];
            tensor<fp16, [1, 512]> output_embeddings = real_div(x = input_cast_fp16, y = denom_cast_fp16)[name = tensor<string, []>("op_1260_cast_fp16")];
        } -> (output_embeddings);
}